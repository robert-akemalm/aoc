package aoc2019;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.PriorityQueue;
import java.util.Set;

import aoc2019.Util.Pos;

public class Day20 {
    static class Edge {
        final Node node;
        int steps;

        Edge(Node node, int steps) {
            this.node = node;
            this.steps = steps;
        }

        @Override
        public String toString() {
            return steps + " -> " + node;
        }
    }

    static class Node {
        final Pos pos;
        final List<Edge> edges = new ArrayList<>();
        final char symbol;
        String portal;

        Node(Pos pos, char symbol) {
            this.pos = pos;
            this.symbol = symbol;
        }

        @Override
        public String toString() {
            return pos + "(" + (portal != null ? portal : symbol) + ")";
        }
    }

    static Map<Pos, Node> map = new HashMap<>();
    static Map<String, Set<Node>> portals = new HashMap<>();

    public static void main(String[] args) {
        long time = System.currentTimeMillis();
        String[] rows = INPUT.split("\n");
        List<Pos> portalPos = new ArrayList<>();
        for (int y = 0; y < rows.length; y++) {
            for (int x = 0; x < rows[y].length(); x++) {
                Pos pos = new Pos(x, y);
                char ch = rows[y].charAt(x);
                if (ch == '.') {
                    Node node = new Node(pos, ch);
                    map.put(pos, node);
                } else if ('A' <= ch && ch <= 'Z') {
                    portalPos.add(pos);
                }
            }
        }

        for (Entry<Pos, Node> e : map.entrySet()) {
            Pos pos = e.getKey();
            List<Edge> edges = e.getValue().edges;
            edges.clear();

            Pos leftPos = new Pos(pos.x - 1, pos.y);
            Node left = map.get(leftPos);
            Pos rightPos = new Pos(pos.x + 1, pos.y);
            Node right = map.get(rightPos);
            Pos upPos = new Pos(pos.x, pos.y - 1);
            Node up = map.get(upPos);
            Pos downPos = new Pos(pos.x, pos.y + 1);
            Node down = map.get(downPos);

            for (Pos portal : portalPos) {
                if (portal.equals(upPos)) {
                    String portalId = "" + rows[upPos.y - 1].charAt(upPos.x) + rows[upPos.y].charAt(upPos.x);
                    up = new Node(upPos, '造');
                    up.portal = portalId;
                    up.edges.add(new Edge(e.getValue(), 0));
                    Set<Node> otherSide = portals.computeIfAbsent(portalId, k -> new HashSet<>());
                    if (!otherSide.isEmpty()) {
                        Node other = otherSide.iterator().next();
                        other.edges.add(new Edge(up, 1));
                        up.edges.add(new Edge(other, 1));
                    }
                    otherSide.add(up);
                } else if (portal.equals(downPos)) {
                    String portalId = "" + rows[downPos.y].charAt(downPos.x) + rows[downPos.y + 1].charAt(downPos.x);
                    down = new Node(downPos, '造');
                    down.portal = portalId;
                    down.edges.add(new Edge(e.getValue(), 0));
                    Set<Node> otherSide = portals.computeIfAbsent(portalId, k -> new HashSet<>());
                    if (!otherSide.isEmpty()) {
                        Node other = otherSide.iterator().next();
                        other.edges.add(new Edge(down, 1));
                        down.edges.add(new Edge(other, 1));
                    }
                    otherSide.add(down);
                } else if (portal.equals(leftPos)) {
                    String portalId = "" + rows[leftPos.y].charAt(leftPos.x - 1) + rows[leftPos.y].charAt(leftPos.x);
                    left = new Node(leftPos, '造');
                    left.portal = portalId;
                    left.edges.add(new Edge(e.getValue(), 0));
                    Set<Node> otherSide = portals.computeIfAbsent(portalId, k -> new HashSet<>());
                    if (!otherSide.isEmpty()) {
                        Node other = otherSide.iterator().next();
                        other.edges.add(new Edge(left, 1));
                        left.edges.add(new Edge(other, 1));
                    }
                    otherSide.add(left);
                } else if (portal.equals(rightPos)) {
                    right = new Node(rightPos, '造');
                    String portalId = "" + rows[rightPos.y].charAt(rightPos.x) + rows[rightPos.y].charAt(rightPos.x + 1);
                    right.portal = portalId;
                    right.edges.add(new Edge(e.getValue(), 0));
                    Set<Node> otherSide = portals.computeIfAbsent(portalId, k -> new HashSet<>());
                    if (!otherSide.isEmpty()) {
                        Node other = otherSide.iterator().next();
                        other.edges.add(new Edge(right, 1));
                        right.edges.add(new Edge(other, 1));
                    }
                    otherSide.add(right);
                }
            }

            if (left != null) {
                edges.add(new Edge(left, left.portal == null ? 1 : 0));
            }
            if (right != null) {
                edges.add(new Edge(right, right.portal == null ? 1 : 0));
            }
            if (up != null) {
                edges.add(new Edge(up, up.portal == null ? 1 : 0));
            }
            if (down != null) {
                edges.add(new Edge(down, down.portal == null ? 1 : 0));
            }
        }

        while (reduce()) {
        }

        Node aa = portals.get("AA").iterator().next();
        Node zz = portals.get("ZZ").iterator().next();
//        aa.edges.get(0).steps--;
//        zz.edges.get(0).node.edges.stream().filter(e -> "ZZ".equals(e.node.portal)).findAny().get().steps--;

        // TODO Rak: Start
        Map<Pos, Integer> best = new HashMap<>();
        int minSteps = Integer.MAX_VALUE;
        PriorityQueue<Path> queue = new PriorityQueue<>(Comparator.comparingInt(o -> o.steps));
        queue.add(new Path(aa));
        while (!queue.isEmpty()) {
            Path path = queue.poll();
            List<Path> possible = path.possibleSteps();
            for (Path p : possible) {
                if (p.steps < best.getOrDefault(p.current.pos, Integer.MAX_VALUE)) {
                    best.put(p.current.pos, p.steps);
                    queue.add(p);
                }
            }
        }
        System.out.println(best.get(zz.pos));
        System.out.println("t: " + (System.currentTimeMillis() - time));
    }

    static class Path {
        final Set<Pos> visited = new HashSet<>();
        Node current = null;
        Node previous = null;
        int steps;

        public Path(Path path, Node current) {
            Edge e = path.current.edges.stream().filter(edge -> edge.node == current).findAny().get();
            this.steps = path.steps + e.steps;
            this.visited.addAll(path.visited);
            this.visited.add(current.pos);
            this.previous = this.current;
            this.current = current;
        }

        public Path(Node start) {
            visited.add(start.pos);
            this.current = start;
            this.steps = 0;
        }

        public List<Path> possibleSteps() {
            List<Path> possible = new ArrayList<>();
            Node c = current;
            for (Edge edge : c.edges) {
                possible.add(new Path(this, edge.node));
            }
            return possible;
        }
    }

    private static boolean reduce() {
        Pos toRemove = null;
        for (Entry<Pos, Node> e : map.entrySet()) {
            Node node = e.getValue();
            if (node.edges.size() == 2 && node.symbol == '.') {
                toRemove = e.getKey();
                Node a = node.edges.get(0).node;
                Node b = node.edges.get(1).node;
                int steps = node.edges.get(0).steps + node.edges.get(1).steps;
                for (int i = 0; i < a.edges.size(); i++) {
                    if (a.edges.get(i).node.pos == node.pos) {
                        a.edges.set(i, new Edge(b, steps));
                    }
                }
                for (int i = 0; i < b.edges.size(); i++) {
                    if (b.edges.get(i).node.pos == node.pos) {
                        b.edges.set(i, new Edge(a, steps));
                    }
                }
                break;
            }
        }
        if (toRemove != null) {
            map.remove(toRemove);
        }
        return toRemove != null;
    }

    private static final String TEST_INPUT = "         A           \n"
                                             + "         A           \n"
                                             + "  #######.#########  \n"
                                             + "  #######.........#  \n"
                                             + "  #######.#######.#  \n"
                                             + "  #######.#######.#  \n"
                                             + "  #######.#######.#  \n"
                                             + "  #####  B    ###.#  \n"
                                             + "BC...##  C    ###.#  \n"
                                             + "  ##.##       ###.#  \n"
                                             + "  ##...DE  F  ###.#  \n"
                                             + "  #####    G  ###.#  \n"
                                             + "  #########.#####.#  \n"
                                             + "DE..#######...###.#  \n"
                                             + "  #.#########.###.#  \n"
                                             + "FG..#########.....#  \n"
                                             + "  ###########.#####  \n"
                                             + "             Z       \n"
                                             + "             Z       ";

    private static final String TEST_INPUT_2 = "                   A               \n"
                                               + "                   A               \n"
                                               + "  #################.#############  \n"
                                               + "  #.#...#...................#.#.#  \n"
                                               + "  #.#.#.###.###.###.#########.#.#  \n"
                                               + "  #.#.#.......#...#.....#.#.#...#  \n"
                                               + "  #.#########.###.#####.#.#.###.#  \n"
                                               + "  #.............#.#.....#.......#  \n"
                                               + "  ###.###########.###.#####.#.#.#  \n"
                                               + "  #.....#        A   C    #.#.#.#  \n"
                                               + "  #######        S   P    #####.#  \n"
                                               + "  #.#...#                 #......VT\n"
                                               + "  #.#.#.#                 #.#####  \n"
                                               + "  #...#.#               YN....#.#  \n"
                                               + "  #.###.#                 #####.#  \n"
                                               + "DI....#.#                 #.....#  \n"
                                               + "  #####.#                 #.###.#  \n"
                                               + "ZZ......#               QG....#..AS\n"
                                               + "  ###.###                 #######  \n"
                                               + "JO..#.#.#                 #.....#  \n"
                                               + "  #.#.#.#                 ###.#.#  \n"
                                               + "  #...#..DI             BU....#..LF\n"
                                               + "  #####.#                 #.#####  \n"
                                               + "YN......#               VT..#....QG\n"
                                               + "  #.###.#                 #.###.#  \n"
                                               + "  #.#...#                 #.....#  \n"
                                               + "  ###.###    J L     J    #.#.###  \n"
                                               + "  #.....#    O F     P    #.#...#  \n"
                                               + "  #.###.#####.#.#####.#####.###.#  \n"
                                               + "  #...#.#.#...#.....#.....#.#...#  \n"
                                               + "  #.#####.###.###.#.#.#########.#  \n"
                                               + "  #...#.#.....#...#.#.#.#.....#.#  \n"
                                               + "  #.###.#####.###.###.#.#.#######  \n"
                                               + "  #.#.........#...#.............#  \n"
                                               + "  #########.###.###.#############  \n"
                                               + "           B   J   C               \n"
                                               + "           U   P   P               ";
    private static final String INPUT = "                                         S       U A   R     G     V       B       L                                       \n"
                                        + "                                         X       Y A   U     T     M       Y       G                                       \n"
                                        + "  #######################################.#######.#.###.#####.#####.#######.#######.#####################################  \n"
                                        + "  #...#.#.#...................#...#.#...#...#.#.#.#.....#...#...#...#.#.......#.....#...#...#.....#.........#.....#...#.#  \n"
                                        + "  ###.#.#.###.###.#####.###.#####.#.#.#.#.###.#.#.#.#####.#.###.#.###.#######.#.###.#.#####.###.###.#####.#.#.#####.#.#.#  \n"
                                        + "  #.............#.#.....#.............#...#...#.#.#.#...#.#.#...#.....#...#.#.#...#.......#.........#...#.#.#...#.#.#.#.#  \n"
                                        + "  ###.#####.#.#.#.#.#.#####.#####.#.#######.#.###.#.#.#.#.#.#.###.#.#.###.#.#.###.#####.###.#########.#########.#.###.#.#  \n"
                                        + "  #...#.....#.#.#.#.#.#.....#...#.#.....#.#.#.....#...#.#.#.#...#.#.#...#.#...#.......#.#.........#.....#.....#...#.....#  \n"
                                        + "  #.#####.###.#.###############.###.#####.#.###########.#.#.#.###.###.###.#.#####.#.#.###.#####.###.#########.#.#.#####.#  \n"
                                        + "  #.#.#.....#.#.#.........................#.......#.#...#.#.....#.#.#...#.....#...#.#...#...#...........#.......#...#.#.#  \n"
                                        + "  ###.#.#.###########.###########.#######.###.#.#.#.#.###.#####.###.#.#####.###.#########.#######.###########.###.###.#.#  \n"
                                        + "  #.....#.#.#...#...#.#.#.#.#.#...#.#.....#...#.#.#...#...#...#.#.......#.....#.#.#.#.#.#.......#.#...#...#...#.#.#.#.#.#  \n"
                                        + "  #.###.###.#.#####.###.#.#.#.#.###.#.#.###.#####.#.#.###.#.#########.#.#.###.#.#.#.#.#.#.#.#######.#####.#.#.#.#.#.#.#.#  \n"
                                        + "  #.#.....#.#.............#.#.#.#.....#.#.#.#.....#.#.#.#...#.....#.#.#.#.#...#.#.#.......#.#.....#.#.#...#.#.#.#.#...#.#  \n"
                                        + "  #####.###.#############.#.#.#####.#.###.###.###.###.#.#.#.#####.#.#.#######.#.#.#.###.#.#.###.###.#.###.###.#.###.###.#  \n"
                                        + "  #.#.#.#.#.#.....#.......#.......#.#...#.....#.#.#...#.#.#...#.....#.#.#.#...#.......#.#.#.#.....#...#...#...#.....#...#  \n"
                                        + "  #.#.###.#.#.#.#.#####.#.###.###.###.#####.#.#.#.###.#.#.###.###.###.#.#.#.#.###.###########.#####.#.###.###.#.#.#####.#  \n"
                                        + "  #.....#...#.#.#...#.#.#...#...#.....#.....#.#.#.#...#.....#.#.........#...#.#.........#.....#...#.#...#.......#.#.....#  \n"
                                        + "  #####.#.#####.#.#.#.#.#.#######.###.###.#.###.###.#.#.#.#####.#####.#######.#.#########.#######.#.#####.#############.#  \n"
                                        + "  #.#.#...#...#.#.#.#.#.#.........#...#...#...#.....#.#.#.....#.#.#.....#...#.#.....#.........#.#.#.....#.....#.#.#.....#  \n"
                                        + "  #.#.###.#.#####.###.###.#####.###.#########.#.###.#######.#####.###.#####.#.#.#####.#.#######.#.#.#.###.#.#.#.#.###.#.#  \n"
                                        + "  #.#.#...#.....#...#.....#.#.....#...#.#...#.#.#...#.#.....#...#.......#.#...#...#...#.#.#.#.......#.#...#.#.#.#...#.#.#  \n"
                                        + "  #.#.###.#.#####.#####.#.#.#######.###.#.###.###.#.#.###.###.###.#.#.###.#.###.#####.###.#.#.#####.###.#######.#.#####.#  \n"
                                        + "  #.....#.#...#.#...#.#.#.#.#.....#...#.........#.#...#.........#.#.#.....#.#.#.#...#.#.#.........#.#.#.#...#...#...#.#.#  \n"
                                        + "  ###.###.#.###.#.###.#.#.#.#####.#.###.###.###.#####.#######.#######.#####.#.#.#.###.#.#.###.#######.#.#.#.#.#####.#.#.#  \n"
                                        + "  #...#.....#.........#.#.#.#.........#.#.#.#.#.#.#.....#.....#.......#.#.....#...........#.....#.#.#...#.#.#...#...#.#.#  \n"
                                        + "  ###.#.###.#####.#########.###.###.#####.#.#.###.#.#.###.#########.#.#.#####.###.###.###########.#.###.#.###.#####.#.#.#  \n"
                                        + "  #.#...#.#...#.#.#...#.#.#.#...#.....#.....#.#.....#.#...#...#.....#.#.......#.....#.#.#.#.#...#.....#...#.....#.....#.#  \n"
                                        + "  #.#####.#.###.#.#.###.#.#.#######.#####.#.#.#####.###.#.#.#.###.#####.#########.###.#.#.#.#.###.#####.###.#########.#.#  \n"
                                        + "  #.#...#.......#.#.#.....#...........#...#.#.#.#.....#.#...#...#.....#.........#.#.....#.....#.....#...........#.......#  \n"
                                        + "  #.#.#######.###.#.###.#.#########.#######.#.#.###.#.#####.#.#.#####.#######.#.###.#######.#.###.#########.#.#####.#.###  \n"
                                        + "  #...#...#.#.#.#...#...#.#...#.#.........#.....#...#...#...#.#.#.....#.......#...#.....#...#.#.#...#.#.#...#.#...#.#.#.#  \n"
                                        + "  ###.###.#.#.#.#.#####.#####.#.#######.###.###########.#######.#.#####.#############.#######.#.#.###.#.###.#####.###.#.#  \n"
                                        + "  #.#.#.#...#...#.#...#.#...#...#      E   X           K       R X     V             W    #.........#...#...#...#.#...#.#  \n"
                                        + "  #.#.#.#.#####.#.#.###.#.###.###      N   I           H       F B     M             D    #.###.#######.#.#.###.#.#.###.#  \n"
                                        + "  #.....#.....#...........#.....#                                                         #.#.....#.....#.#.#.#.#.......#  \n"
                                        + "  #.###.#.###.#.#####.#.#.#.###.#                                                         #####.#######.#.###.#.###.#.###  \n"
                                        + "  #.#...#...#...#.....#.#.#...#..UO                                                     QA..#.............#.#.......#.#..MB\n"
                                        + "  #.#.#####.###.###.#.#.#.#.#.###                                                         #.#.#.#.###.###.#.#.###.#####.#  \n"
                                        + "HV..#.....#.#.....#.#.#.#.#.#...#                                                         #...#.#.#.....#...#.#...#.....#  \n"
                                        + "  #######.#.#.#####.#.###.#####.#                                                         #########.#.###.#.#.#.#####.#.#  \n"
                                        + "  #.#...#...#.#.#...#.#.#.......#                                                         #.....#...#.#.#.#...#.#.....#.#  \n"
                                        + "  #.#.#########.#######.#########                                                         ###.#########.#.#.###.#.#.#.#.#  \n"
                                        + "  #.......#...#.......#.....#...#                                                         #...#.......#.#.#...#...#.#.#..ZZ\n"
                                        + "  #.#.#.#.#.#.#.#.###.#.###.#.#.#                                                         ###.#####.###.#.#.###.#.#######  \n"
                                        + "  #.#.#.#...#.#.#.#...#.#.....#.#                                                         #...#.#.#.#...#.#.#...#.#.#.#..YX\n"
                                        + "  #.#####.#.#.#.#.#.###.#######.#                                                         #.#.#.#.#.#.#.#.#########.#.#.#  \n"
                                        + "  #.....#.#.#...#.#.#...#.#.....#                                                       GT..#.....#...#.#...#.....#.....#  \n"
                                        + "  #.#.#############.###.#.###.###                                                         #.#.#.#.#.###.#######.###.#.#.#  \n"
                                        + "XI..#.#.#...#.#...#.......#......AO                                                       #.#.#.#...#...#.#.#...#.#.#.#.#  \n"
                                        + "  #.#.#.###.#.###.#######.###.#.#                                                         ###.#####.#.###.#.###.#.#.#####  \n"
                                        + "  #.#.#.......#.........#.#.#.#.#                                                         #...#.#...#.................#.#  \n"
                                        + "  #####.###.###.#####.#.###.#.###                                                         ###.#.###.#.###.#.###.#######.#  \n"
                                        + "WD......#...........#.#.....#.#.#                                                         #.#.#.....#.#.#.#.#.#.#...#....AO\n"
                                        + "  #.###.#####.#.###########.###.#                                                         #.#########.#.###.#.###.#.#.###  \n"
                                        + "  #.#.....#...#...#.........#...#                                                         #...#.........#.#.#.#...#.#...#  \n"
                                        + "  #.#########.#.#######.#####.#.#                                                         #.#############.###.#.#.#.#.#.#  \n"
                                        + "  #...#...#.#.#.#...#.........#..MB                                                     PI..#...#.#.#.#...#.....#.#.#.#.#  \n"
                                        + "  #######.#.#.#####.#.###.#.#.###                                                         #.###.#.#.#.#.#####.#.###.###.#  \n"
                                        + "  #...#.....#.#.#.#.#...#.#.#.#..UY                                                       #...................#.#.......#  \n"
                                        + "  #.###.#######.#.#.###########.#                                                         #######.#######################  \n"
                                        + "ZY....#...#.....#.#.#.#..........HV                                                     RU......#.#...............#...#..PI\n"
                                        + "  #.#.#.#####.#.#.#.#.#####.#.###                                                         #####.###.###.###.###.#.#.#.#.#  \n"
                                        + "  #.#.....#...#.........#...#...#                                                         #...#.#...#.....#.#.#.#...#...#  \n"
                                        + "  #.###.#####.###.###.###.###.#.#                                                         #.###.#.###.###.#.#.#.#.#######  \n"
                                        + "OQ..#.#.......#.#...#.......#.#.#                                                         #.#...#...#...#.#...#.#.....#.#  \n"
                                        + "  ###.#########.###############.#                                                         ###.###.#####.#########.#####.#  \n"
                                        + "  #...............#.#.......#...#                                                         #.......#...#...#.#...#.#.#...#  \n"
                                        + "  #.###.#####.#####.#.#####.#####                                                         ###########.#####.###.###.#.###  \n"
                                        + "  #.#.#.....#...#.#.....#.....#.#                                                         #.............#.#...........#.#  \n"
                                        + "  ###.###.###.###.#####.#.#####.#                                                         #.###.###.#.###.###.#.#####.#.#  \n"
                                        + "  #.....#.#...#.#.#.....#.......#                                                       OQ..#.....#.#.#.#.....#.....#.#..WA\n"
                                        + "  #.###.#.#.###.#.#.#########.###                                                         #.#.#########.#####.#######.#.#  \n"
                                        + "UO..#.#...#.............#.#.#....SX                                                       #.#.....#.#...#...#...#.....#.#  \n"
                                        + "  ###.###############.###.#.#####                                                         ###.###.#.###.###.#.#######.#.#  \n"
                                        + "  #.......#.........#.#...#.....#                                                         #.#.#.#.............#.#.......#  \n"
                                        + "  #.#.#.#.#.#.###.#.###.#.#.###.#                                                         #.###.#####.#.###.#.#.#######.#  \n"
                                        + "  #.#.#.#...#...#.#.....#.....#..BY                                                     WA....#.....#.#.#...#...#...#.#.#  \n"
                                        + "  #.###############.#######.###.#                                                         ###.#.###.###.#########.###.###  \n"
                                        + "RF....#.#.#...#.....#.#.#...#.#.#                                                         #...#.#...#.......#...#.#.#.#.#  \n"
                                        + "  #####.#.###.#######.#.#####.###                                                         #.###.###.###.#####.###.#.#.#.#  \n"
                                        + "  #.#.#.#.................#.#....TR                                                       #.....#.....#...#.#.....#.#...#  \n"
                                        + "  #.#.#.#.#.#.#.###.#.###.#.###.#                                                         #.###.###.#######.#.#.###.#.###  \n"
                                        + "XB....#...#.#.#.#...#.#.........#                                                         #...#.#.#...........#..........KH\n"
                                        + "  ###.#.#.#.#.#####.#####.#.#.###                                                         #.#####.#.###.#.#.#.###.#.###.#  \n"
                                        + "  #...#.#.#.#.#.....#.#...#.#...#                                                         #...#.......#.#.#.#.#.#.#.#...#  \n"
                                        + "  ###.#.#####.###.#.#.#.#.#.#.###                                                         ###.###.#####.#.###.#.#.#####.#  \n"
                                        + "  #.......#.....#.#...#.#.#.#...#                                                         #...#.....#.#.#...#.#.......#.#  \n"
                                        + "  ###.#.#####.#.###.#.#####.###.#            Z       M   Y           M       P   L        #.#.#.#.###.#.#.###.#.#.#######  \n"
                                        + "  #...#.#...#.#.#...#...#...#...#            Y       W   X           D       S   G        #.#.#.#.#.....#...#.#.#.......#  \n"
                                        + "  ###.###.#########.#########################.#######.###.###########.#######.###.###########.###.#.#.#.###.#####.###.###  \n"
                                        + "  #.........#...#.......#.#.......#.....#...#.#.#...#.#.........#.......#.#.#.#...#.......#.#...#.#.#.#...#.....#...#...#  \n"
                                        + "  #.###.#####.###.#.#.###.###.#########.#.#.#.#.#.#.#.#.#.#.###.###.#.###.#.#.#.#####.#.###.#.#####.###.###.#####.#.#.###  \n"
                                        + "  #.#.........#...#.#.#.........#.#.#.....#...#...#...#.#.#...#.#.#.#...#.#...#.....#.#.....#...#.#.#.#.#.#.....#.#.#...#  \n"
                                        + "  #####.#.###.#.###.#########.#.#.#.#.###.#####.#.#####.#########.###.###.###.###.###.#.#######.#.###.#.#.###.#####.#.###  \n"
                                        + "  #.#...#...#.#.#.....#.#.#...#.#.....#.....#.#.#.#...........#.....#.....#.#.#...#.#.#.#...#.#.#...........#...#...#...#  \n"
                                        + "  #.#.#.#.#.###########.#.#.#.###.#.#######.#.#.#######.#.#######.###.#.###.#.#.###.#.###.###.###.###.#####.#.#.###.###.#  \n"
                                        + "  #.#.#.#.#.........#.....#.#.#.#.#.#.........#...#.....#.#.#...#.#...#.#.#...#.......#.........#...#...#...#.#...#.#...#  \n"
                                        + "  #.#.###.#######.#######.###.#.#.#######.#######.#######.#.#.#.#.#.#####.#.###.###.#.#.###.#########.###.#.#.#####.###.#  \n"
                                        + "  #...#.........#.#...#.........#.#.#.....#.#.#.....#.......#.#.#.....#.......#...#.#.....#...#.#...#.#.#.#.#...#.....#.#  \n"
                                        + "  ###.#.#########.#.#######.#.#.###.###.#.#.#.#.###.#.#.#######.#.#####.#.#.#.#######.###.#.###.#.###.#.###.#.###.#.###.#  \n"
                                        + "  #.#.#.#...#...#.#.#.#.#...#.#.........#.#.....#.#.#.#...#.#.........#.#.#.#.#.........#.#.#...#.#.......#.#...#.#.#...#  \n"
                                        + "  #.#.###.#####.###.#.#.###.#####.#####.###.###.#.#####.###.#.#.#####.#######.#####.###########.#.###.#######.#####.###.#  \n"
                                        + "  #.....#.........#.........#.....#.......#.#.#.....#.#...#.#.#...#.#...#.....#.......#.......#.....#...#.......#.....#.#  \n"
                                        + "  #####.#.###.###########.#####.###.###.###.#.#.#####.#.###.#.#.###.#.#######.#####.###.#.#.###.###.#.#####.#.#.###.#.###  \n"
                                        + "  #.........#...#.#.......#.#...#...#.....#.#...#...........#.#...#.#.#.#.......#.#.....#.#.#.#...#.#.#...#.#.#...#.#...#  \n"
                                        + "  #.###.#########.#.#####.#.###.#.#####.###.#.#.#######.#######.#.#.###.###.###.#.#.#########.#.#####.#.#####.#####.###.#  \n"
                                        + "  #...#.......#.....#.#...#.....#.#.......#.#.#...#.....#.......#.#.......#...#.#.#.#.#...........#.......#.#...#...#...#  \n"
                                        + "  #.#.###.###.#.#####.###########.#####.#.#####.#######.###.###.#########.#.#####.#.#.#.#.###########.#####.#.#.#.#.#.###  \n"
                                        + "  #.#.#...#...#.#.........#.#...#.#.#.#.#.#...........#...#.#.#...#...........#.........#.....#...#.........#.#.#.#.#...#  \n"
                                        + "  #.#.#.###.#############.#.#.#####.#.#.###.#.#.#########.###.#.#############.#.#####.###.#####.###.#.#.###.###.#######.#  \n"
                                        + "  #.#.#...#.#.#.#.#.....#.#.#.#...#.......#.#.#.#.#.....#.....#...#.#.#...#...#...#...#.#.#.#.....#.#.#...#.#.........#.#  \n"
                                        + "  ###.#.#.###.#.#.#####.#.#.#.###.#####.#.#####.#.#.###.#####.#.###.#.#.###.#.###.#####.###.#.#########.#.###.###.###.#.#  \n"
                                        + "  #.#.#.#.#.....#.#.....................#...#.....#.#.#.......#...#...#...#.#.#.......#...............#.#.#.....#...#.#.#  \n"
                                        + "  #.#.#########.#.#.#.#.###.#####.#.###.#######.#####.###.#####.#####.#.#.#.#.#.#######.###.#.###.###.###########.#####.#  \n"
                                        + "  #.....#...#.......#.#.#.....#.#.#.#.....#.#.#.#.....#.#.#.#.#...#.....#...#.#.........#.#.#.#...#.....#.......#...#...#  \n"
                                        + "  #.#######.#.#####.###.#######.#######.###.#.#.###.###.#.#.#.###.#####.###.###.#########.#.###.#.#####.#.#######.#.###.#  \n"
                                        + "  #.#...#...#.#.....#...#.............#.#.....#.......#.....#.#.......#.#.#.#.............#...#.#...#.......#.#.#.#...#.#  \n"
                                        + "  #.#.#.#.#.#.#####.###.#####.#######.#.#.#.#########.#.#####.#######.#.#.#####.###############.#.#.#.###.###.#.#####.###  \n"
                                        + "  #.#.#...#.....#...#...#.....#...........#.....#.....#.......#.......#...#...................#.#.#.#...#...........#...#  \n"
                                        + "  ###########################################.###.#########.#######.#####.#########.#####################################  \n"
                                        + "                                             M   T         P       Q     M         E                                       \n"
                                        + "                                             W   R         S       A     D         N                                       ";
}
