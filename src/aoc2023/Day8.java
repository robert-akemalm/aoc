package aoc2023;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.atomic.AtomicLong;
import java.util.stream.Collectors;

public class Day8 {
    private static void a(Input input) {
        Map<String, Node> nameToNode = input.nodes.stream().collect(Collectors.toMap(Node::name, n -> n));
        Node target = nameToNode.get("ZZZ");
        Node current = nameToNode.get("AAA");
        int lrIx = 0;
        long numSteps = 0;
        while (current != target) {
            String next = input.lr.charAt(lrIx) == 'L' ? current.left : current.right;
            current = nameToNode.get(next);
            lrIx = (lrIx + 1) % input.lr.length();
            numSteps++;
        }
        System.out.println(numSteps);
    }

    private static void b(Input input) {
        Map<String, NodeB> nameToNode = input.nodes.stream().collect(Collectors.toMap(Node::name,
                n -> new NodeB(n.name.charAt(n.name.length() - 1))));
        input.nodes.forEach(n -> nameToNode.get(n.name).setLR(nameToNode.get(n.left), nameToNode.get(n.right)));
        NodeB[] starts = nameToNode.values().stream().filter(n -> n.last == 'A').toArray(NodeB[]::new);
        PathInfo[] paths = Arrays.stream(starts).map(n -> n.pathInfo(input.lr)).toArray(PathInfo[]::new);

        long[] endsBeforeLoop = Arrays.stream(paths).flatMapToLong(p -> Arrays.stream(p.stepsToEndBeforeLoop)).sorted().toArray();
        for (long steps : endsBeforeLoop) {
            if (Arrays.stream(paths).allMatch(p -> p.isEnd(steps))) {
                System.out.println(steps);
                return;
            }
        }

        PathInfo path = Arrays.stream(paths).min(Comparator.comparingInt(p -> p.stepsToEndInLoop.length)).orElseThrow();
        long[] stepsToNextEnd = new long[path.stepsToEndInLoop.length];
        for (int i = 0; i < path.stepsToEndInLoop.length; i++) {
            if (i == path.stepsToEndInLoop.length - 1) {
                stepsToNextEnd[i] = path.loopLength - path.stepsToEndInLoop[i] + path.stepsToEndInLoop[0];
            } else {
                stepsToNextEnd[i] = path.stepsToEndInLoop[i + 1] - path.stepsToEndInLoop[i];
            }
        }
        AtomicLong stepsToEnd = new AtomicLong(path.stepsUntilLoop + path.stepsToEndInLoop[0]);
        int ix = 0;
        while (!Arrays.stream(paths).allMatch(p -> p.isEnd(stepsToEnd.get()))) {
            ix = (ix + 1) % path.stepsToEndInLoop.length;
            stepsToEnd.addAndGet(stepsToNextEnd[ix]);
        }
        System.out.println(stepsToEnd.get());
    }

    static class NodeB {
        private final char last;
        private NodeB left;
        private NodeB right;

        NodeB(char last) {
            this.last = last;
        }

        void setLR(NodeB left, NodeB right) {
            this.left = left;
            this.right = right;
        }

        PathInfo pathInfo(String lr) {
            Set<NodeB> seen = new HashSet<>();
            NodeB current = this;
            List<Long> stepsToEndBeforeLoop = new ArrayList<>();
            long steps = 0;
            long stepsUntilLoop = 0;
            while (seen.add(current)) {
                for (int i = 0; i < lr.length(); i++) {
                    current = lr.charAt(i) == 'L' ? current.left : current.right;
                    steps++;
                    stepsUntilLoop++;
                    if (current.last == 'Z') {
                        stepsToEndBeforeLoop.add(steps);
                    }
                }
            }

            List<Long> stepsToEndInLoop = new ArrayList<>();
            steps = 0;
            if (current.last == 'Z') {
                stepsToEndInLoop.add(steps);
            }
            seen.clear();
            while (seen.add(current)) {
                for (int i = 0; i < lr.length(); i++) {
                    current = lr.charAt(i) == 'L' ? current.left : current.right;
                    steps++;
                    if (current.last == 'Z') {
                        stepsToEndInLoop.add(steps);
                    }
                }
            }
            return new PathInfo(stepsUntilLoop, stepsToEndBeforeLoop.stream().mapToLong(l -> l).toArray(),
                    stepsToEndInLoop.stream().mapToLong(l -> l).toArray(), steps);
        }
    }

    record PathInfo(long stepsUntilLoop, long[] stepsToEndBeforeLoop, long[] stepsToEndInLoop, long loopLength) {
        boolean isEnd(long steps) {
            if (steps < stepsUntilLoop) {
                return Arrays.binarySearch(stepsToEndBeforeLoop, steps) >= 0;
            }
            steps -= stepsUntilLoop;
            steps = steps % loopLength;
            return Arrays.binarySearch(stepsToEndInLoop, steps) >= 0;

        }
    }

    record Node(String name, String left, String right) {}

    record Input(String lr, List<Node> nodes) {
        static Input parse(String input) {
            String lr = input.substring(0, input.indexOf('\n'));
            List<Node> nodes = input.lines().skip(2).map(line -> new Node(
                    line.substring(0, line.indexOf(' ')),
                    line.substring(line.indexOf('(') + 1, line.indexOf(',')),
                    line.substring(line.lastIndexOf(' ') + 1, line.indexOf(')')))).toList();
            return new Input(lr, nodes);
        }
    }

    private static final String TEST_INPUT = "LLR\n"
                                             + "\n"
                                             + "AAA = (BBB, BBB)\n"
                                             + "BBB = (AAA, ZZZ)\n"
                                             + "ZZZ = (ZZZ, ZZZ)";

    private static final String TEST_INPUT_B = "LR\n"
                                               + "\n"
                                               + "11A = (11B, XXX)\n"
                                               + "11B = (XXX, 11Z)\n"
                                               + "11Z = (11B, XXX)\n"
                                               + "22A = (22B, XXX)\n"
                                               + "22B = (22C, 22C)\n"
                                               + "22C = (22Z, 22Z)\n"
                                               + "22Z = (22B, 22B)\n"
                                               + "XXX = (XXX, XXX)";
    private static final String INPUT =
            "LRLRLLRRLLRRLRRLRRRLLRLRLRLRLRRLRRRLRLRRLRLLRRLLRLRRLRLRRLLRRRLRLRLRRRLRLLRRRLLLLLLRRRLRRLLLRRLRLRRLRRLRLRRLRRLLRRLRRRLRRRLLRLRLLLRRLLLRRLLRRLRLLRRRLRRRLRRRLRLRRLRRLLLRRRLRRLLRRLRRRLRLRLRRLRRLRRRLRRRLRLLLLRRRLRLRRRLRRRLLRLRRLRRLLRLLLRRLRLRRLRRRLRRRLRRRLLRRRLRLLRRRLRRRLRRRLRRRLRRLRRRLLRRLLRLRLRRRLRRRLRLRRRR\n"
            + "\n"
            + "LFM = (PCJ, GQH)\n"
            + "THP = (SPP, MKB)\n"
            + "PBL = (VVX, JMM)\n"
            + "DSR = (BST, MPD)\n"
            + "QKF = (DSR, KGX)\n"
            + "AAA = (SLH, CVN)\n"
            + "DSH = (DVN, VXT)\n"
            + "VTK = (NSF, QJM)\n"
            + "QQR = (FNB, CBM)\n"
            + "RQV = (XQQ, NQQ)\n"
            + "CGV = (CCB, FTX)\n"
            + "RXL = (HXQ, HLQ)\n"
            + "MQP = (MSH, TJB)\n"
            + "MPL = (JSJ, TJR)\n"
            + "XQK = (RQT, JKB)\n"
            + "GXT = (JFP, MTT)\n"
            + "LHK = (BVR, MFH)\n"
            + "BXH = (PGR, NDC)\n"
            + "FFV = (MJC, TLD)\n"
            + "TFM = (DKJ, RTC)\n"
            + "MVG = (TNC, PXR)\n"
            + "QXN = (CGV, KKM)\n"
            + "LTN = (MQC, XGD)\n"
            + "NLP = (SQQ, DKG)\n"
            + "QTK = (MBH, GJX)\n"
            + "SSR = (DHV, NHN)\n"
            + "DGJ = (QSX, CKB)\n"
            + "SFD = (GRS, DLD)\n"
            + "HBT = (NVN, HJF)\n"
            + "VKH = (CBT, CBT)\n"
            + "VRH = (FVN, JNB)\n"
            + "HTJ = (JNB, FVN)\n"
            + "BDL = (SQS, QVX)\n"
            + "MMC = (MJC, TLD)\n"
            + "RBL = (VNF, BXD)\n"
            + "RNM = (HJQ, PJF)\n"
            + "CTZ = (NCP, PLT)\n"
            + "JFK = (TPJ, JGX)\n"
            + "HPJ = (MMC, FFV)\n"
            + "RJC = (RBH, DFJ)\n"
            + "DHL = (RJC, JFD)\n"
            + "LVR = (BBB, LHK)\n"
            + "LFD = (GCQ, SGC)\n"
            + "BVG = (BSQ, QXH)\n"
            + "DVN = (MTL, NDG)\n"
            + "XGD = (TML, JQL)\n"
            + "RQS = (VXX, BDV)\n"
            + "CPC = (PGB, SVP)\n"
            + "QLQ = (CLK, CBH)\n"
            + "RXZ = (SHG, MDS)\n"
            + "NTR = (RGP, PNX)\n"
            + "BBB = (MFH, BVR)\n"
            + "RGK = (FRD, FRD)\n"
            + "JLV = (DVV, GSF)\n"
            + "NLS = (VFF, HCX)\n"
            + "RHC = (DKG, SQQ)\n"
            + "NVB = (TTG, QTK)\n"
            + "SLZ = (DJM, BVG)\n"
            + "BFK = (SKJ, BBD)\n"
            + "HXX = (XQK, BVT)\n"
            + "SKS = (SLL, FQH)\n"
            + "SGB = (RLT, RHK)\n"
            + "NPD = (RFJ, DJN)\n"
            + "XSJ = (TSF, MVT)\n"
            + "LLH = (RPV, VML)\n"
            + "NXD = (DJS, FJG)\n"
            + "GJX = (SGS, LBJ)\n"
            + "FBV = (CXG, DCJ)\n"
            + "FRX = (GDV, RQB)\n"
            + "SDC = (RGC, THM)\n"
            + "JCT = (CSC, GNM)\n"
            + "SPS = (MLP, TRQ)\n"
            + "BNG = (PFC, CLX)\n"
            + "SHH = (LPM, VRC)\n"
            + "SGC = (FCH, JLC)\n"
            + "FJB = (MVK, JKT)\n"
            + "DRN = (KGL, LTN)\n"
            + "RJB = (NTR, BDN)\n"
            + "DMC = (JBM, KNV)\n"
            + "HBG = (RQB, GDV)\n"
            + "VRC = (RDD, MRD)\n"
            + "JJP = (GQC, VMP)\n"
            + "PLB = (VKX, BGL)\n"
            + "DVV = (QTS, NHG)\n"
            + "LGL = (SSX, JRQ)\n"
            + "RGC = (DVG, RDQ)\n"
            + "GPK = (DDL, FLG)\n"
            + "NVN = (HPJ, SFK)\n"
            + "DVQ = (JFJ, FRC)\n"
            + "VDP = (PFL, GLN)\n"
            + "CVN = (HNX, QKF)\n"
            + "QXP = (VTG, BDC)\n"
            + "LKT = (SBP, SBP)\n"
            + "QSX = (FNN, FKT)\n"
            + "CSC = (HPQ, SLS)\n"
            + "FNN = (DCV, JKF)\n"
            + "MTH = (NVN, HJF)\n"
            + "TPJ = (HNM, NGV)\n"
            + "NHN = (VCC, RXL)\n"
            + "BHF = (JKK, LFD)\n"
            + "HXQ = (VNH, FBV)\n"
            + "KDR = (HDN, HJJ)\n"
            + "SVD = (VRK, STT)\n"
            + "FGJ = (TNM, CRD)\n"
            + "XFF = (NPD, RXQ)\n"
            + "TNC = (XKT, LRP)\n"
            + "VBM = (GJM, PBK)\n"
            + "XBV = (DGJ, QJN)\n"
            + "GXH = (LVK, QGX)\n"
            + "SLH = (HNX, QKF)\n"
            + "ZZZ = (CVN, SLH)\n"
            + "RTC = (TPH, FJT)\n"
            + "NQP = (MJH, MSP)\n"
            + "XSD = (STT, VRK)\n"
            + "HJJ = (XMV, TJX)\n"
            + "JFP = (XSV, KBQ)\n"
            + "FTD = (NMN, PXX)\n"
            + "NVQ = (MSP, MJH)\n"
            + "SHC = (PTV, XDR)\n"
            + "DCV = (TFX, TFX)\n"
            + "BTX = (JJG, FLL)\n"
            + "RDQ = (DCF, FRH)\n"
            + "MTT = (KBQ, XSV)\n"
            + "DRB = (RML, LGR)\n"
            + "PBD = (VSX, FRS)\n"
            + "HFS = (KBM, KSJ)\n"
            + "SKJ = (NXN, LJM)\n"
            + "MTS = (GJC, SQX)\n"
            + "BRL = (TMJ, JTT)\n"
            + "TTQ = (KFC, DPL)\n"
            + "LQF = (DJS, FJG)\n"
            + "TKG = (JFD, RJC)\n"
            + "PGB = (BFJ, BQJ)\n"
            + "BQX = (VHC, PQH)\n"
            + "MRD = (BTB, NJK)\n"
            + "LJF = (XQR, PMH)\n"
            + "BCL = (VBK, JHN)\n"
            + "BHQ = (VMB, SQF)\n"
            + "BSR = (LPM, VRC)\n"
            + "VNK = (GBH, LPQ)\n"
            + "KHJ = (NJG, QQL)\n"
            + "VMB = (BBK, VXF)\n"
            + "QJM = (QDN, VFV)\n"
            + "KFC = (FSM, PMF)\n"
            + "JVN = (DMJ, SPR)\n"
            + "MVT = (RGM, HDH)\n"
            + "PQB = (BVP, NTH)\n"
            + "QQF = (KJP, BDP)\n"
            + "RGP = (JJP, MFM)\n"
            + "DLD = (VSG, BDL)\n"
            + "SCV = (CBT, LHV)\n"
            + "VTD = (KLC, QVL)\n"
            + "FCH = (GGR, TFM)\n"
            + "GJR = (QMX, CFM)\n"
            + "PMH = (GSG, JSF)\n"
            + "DCJ = (CDJ, TRP)\n"
            + "QJX = (NVQ, NQP)\n"
            + "DJN = (JFK, HFM)\n"
            + "DQP = (DSS, PBL)\n"
            + "XXH = (NTX, QLG)\n"
            + "MXK = (JTT, TMJ)\n"
            + "FDL = (JCT, TRR)\n"
            + "MGA = (PLT, NCP)\n"
            + "HPS = (RFQ, VXV)\n"
            + "SBC = (NPD, RXQ)\n"
            + "XPD = (VHH, PDH)\n"
            + "SRX = (SSX, JRQ)\n"
            + "CKJ = (MQQ, QJX)\n"
            + "FKT = (DCV, JKF)\n"
            + "JKP = (VFF, HCX)\n"
            + "JMN = (XSJ, CQP)\n"
            + "GLN = (SFQ, SGB)\n"
            + "PTV = (JNS, FXR)\n"
            + "FXM = (NTR, BDN)\n"
            + "DJS = (XMQ, KSN)\n"
            + "LVC = (FRD, PNN)\n"
            + "JPD = (PQP, XCX)\n"
            + "GQC = (NSQ, GJD)\n"
            + "SFK = (FFV, MMC)\n"
            + "JBD = (TFG, MSN)\n"
            + "BSZ = (RGR, FTD)\n"
            + "SQX = (XRQ, PQB)\n"
            + "PPV = (VBD, SNX)\n"
            + "JSF = (FRT, MVG)\n"
            + "JMT = (TJG, BNV)\n"
            + "JMJ = (DCX, BNG)\n"
            + "KJP = (QFH, VSP)\n"
            + "VXV = (SHM, NMD)\n"
            + "KLC = (XLB, MCH)\n"
            + "JMD = (XQQ, NQQ)\n"
            + "PJN = (FDL, BQC)\n"
            + "PLT = (MCP, VHB)\n"
            + "BGL = (DSC, PSN)\n"
            + "RXH = (SLH, CVN)\n"
            + "VSG = (QVX, SQS)\n"
            + "BDC = (RPS, RBL)\n"
            + "JMM = (XMJ, XDG)\n"
            + "RHK = (QKH, BTX)\n"
            + "RQX = (KSM, PLB)\n"
            + "FQH = (MHT, CDG)\n"
            + "SRM = (PLV, QGV)\n"
            + "HNX = (DSR, KGX)\n"
            + "JNS = (RJN, RXD)\n"
            + "MLP = (JMN, PCR)\n"
            + "LVK = (JHS, QMJ)\n"
            + "PRG = (TJB, MSH)\n"
            + "VGS = (JXR, JLP)\n"
            + "XQQ = (KTJ, BMN)\n"
            + "DGA = (FTD, RGR)\n"
            + "HTX = (MTG, XBV)\n"
            + "CCB = (TXB, VTK)\n"
            + "RQT = (TLR, LDB)\n"
            + "QMX = (SHQ, DPB)\n"
            + "MDS = (KQD, DMC)\n"
            + "JDC = (LCL, SSR)\n"
            + "NHG = (JMD, RQV)\n"
            + "CBM = (DBH, BHQ)\n"
            + "RKB = (VGP, LLP)\n"
            + "SJD = (PLB, KSM)\n"
            + "CDG = (FBC, TJF)\n"
            + "QGV = (TLB, QVB)\n"
            + "BDS = (SPS, BGH)\n"
            + "DGF = (VKH, VKH)\n"
            + "RLV = (MKB, SPP)\n"
            + "SHG = (KQD, DMC)\n"
            + "KQD = (KNV, JBM)\n"
            + "RMV = (DVV, GSF)\n"
            + "MSH = (XXH, TVV)\n"
            + "FJX = (BVG, DJM)\n"
            + "KCV = (PLV, QGV)\n"
            + "MFH = (HCQ, CNF)\n"
            + "TLD = (MCK, KXR)\n"
            + "SLB = (VGP, LLP)\n"
            + "KSN = (HFF, PPV)\n"
            + "RGV = (BDP, KJP)\n"
            + "CNF = (NBF, PCM)\n"
            + "TJF = (GQB, JNP)\n"
            + "NDG = (MTS, JLF)\n"
            + "VHH = (FXM, RJB)\n"
            + "MPH = (CLK, CBH)\n"
            + "RPM = (NXD, LQF)\n"
            + "JHS = (PGH, MXS)\n"
            + "TRJ = (PJF, HJQ)\n"
            + "RJK = (SSR, LCL)\n"
            + "DPB = (SLB, RKB)\n"
            + "XXD = (FFJ, BBX)\n"
            + "QBX = (CRF, VBM)\n"
            + "RMX = (NGM, CPL)\n"
            + "VXT = (MTL, NDG)\n"
            + "KQN = (QQF, RGV)\n"
            + "SFQ = (RLT, RHK)\n"
            + "QGJ = (XDR, PTV)\n"
            + "MSN = (RMV, JLV)\n"
            + "HCQ = (PCM, NBF)\n"
            + "GKF = (PLT, NCP)\n"
            + "VCC = (HLQ, HXQ)\n"
            + "MSJ = (JKP, NLS)\n"
            + "RFF = (BXM, SPH)\n"
            + "FBD = (DGF, VNG)\n"
            + "GLJ = (MQF, RRT)\n"
            + "QRN = (MTH, HBT)\n"
            + "QGS = (TNM, CRD)\n"
            + "XPP = (FNB, CBM)\n"
            + "QQQ = (GHK, DVD)\n"
            + "RBK = (PPQ, XTT)\n"
            + "HHG = (DPL, KFC)\n"
            + "SBP = (FTD, RGR)\n"
            + "MJH = (MLQ, QTG)\n"
            + "JLX = (BDS, TMM)\n"
            + "DVG = (FRH, DCF)\n"
            + "DFJ = (NSK, PDS)\n"
            + "RHJ = (DKM, TDJ)\n"
            + "FQN = (JKT, MVK)\n"
            + "RMD = (LGR, RML)\n"
            + "JTB = (VDP, BSL)\n"
            + "GJM = (NLD, RHJ)\n"
            + "LGP = (CPC, NQN)\n"
            + "JHN = (NBQ, MSJ)\n"
            + "SQF = (BBK, VXF)\n"
            + "HST = (CFM, QMX)\n"
            + "LBJ = (TBP, VNK)\n"
            + "SNX = (PCX, RMX)\n"
            + "PJF = (MGX, SKS)\n"
            + "RRT = (JTB, LSC)\n"
            + "JTT = (MLM, GLJ)\n"
            + "DLQ = (JBQ, RND)\n"
            + "LGR = (QRV, XXD)\n"
            + "LPT = (BSR, SHH)\n"
            + "HQB = (BRL, MXK)\n"
            + "TRP = (LFM, LCT)\n"
            + "JKT = (RNM, TRJ)\n"
            + "MXS = (GQR, KQN)\n"
            + "MKB = (LVQ, NNX)\n"
            + "NDC = (RGK, LVC)\n"
            + "LFN = (RRL, XNF)\n"
            + "SHQ = (RKB, SLB)\n"
            + "JGX = (NGV, HNM)\n"
            + "RPN = (BCL, CDR)\n"
            + "JSJ = (CRH, FHR)\n"
            + "FRH = (THR, TSX)\n"
            + "BNV = (RXS, LGP)\n"
            + "FLL = (GSR, PVF)\n"
            + "DNS = (JLP, JXR)\n"
            + "HDN = (TJX, XMV)\n"
            + "HJQ = (SKS, MGX)\n"
            + "TNX = (SJD, RQX)\n"
            + "XQD = (BFR, MDM)\n"
            + "GNM = (HPQ, SLS)\n"
            + "NML = (DGF, VNG)\n"
            + "BXM = (FJB, FQN)\n"
            + "MSP = (QTG, MLQ)\n"
            + "PBJ = (XLJ, TKD)\n"
            + "MNN = (DNS, VGS)\n"
            + "RBH = (PDS, NSK)\n"
            + "BFJ = (KNT, SDP)\n"
            + "CRD = (PBC, BFK)\n"
            + "TJB = (XXH, TVV)\n"
            + "PDJ = (SRN, SRN)\n"
            + "XJS = (HBG, FRX)\n"
            + "BBK = (LLH, PNP)\n"
            + "QQL = (MFR, KKZ)\n"
            + "FVN = (LGL, SRX)\n"
            + "LRP = (GXT, BSF)\n"
            + "SVX = (MSN, TFG)\n"
            + "PFC = (PCP, FGB)\n"
            + "XMJ = (GKF, GKF)\n"
            + "LLL = (DNS, VGS)\n"
            + "VSX = (TKG, DHL)\n"
            + "RND = (SBC, XFF)\n"
            + "MLQ = (DXT, JMT)\n"
            + "XLC = (TTG, QTK)\n"
            + "TJG = (RXS, LGP)\n"
            + "DPL = (PMF, FSM)\n"
            + "PCR = (CQP, XSJ)\n"
            + "BSQ = (XSD, SVD)\n"
            + "DHP = (HPS, MNQ)\n"
            + "SCB = (HXX, NQV)\n"
            + "FFJ = (LJF, BSV)\n"
            + "FTX = (VTK, TXB)\n"
            + "TRQ = (PCR, JMN)\n"
            + "GDL = (PBD, BJK)\n"
            + "MLM = (RRT, MQF)\n"
            + "TLA = (QXP, MKM)\n"
            + "SMN = (LFN, FVJ)\n"
            + "RRL = (CKJ, JNK)\n"
            + "BDP = (VSP, QFH)\n"
            + "CBC = (DVN, VXT)\n"
            + "JLP = (PTL, SJK)\n"
            + "FRS = (TKG, DHL)\n"
            + "SQQ = (MPL, QBQ)\n"
            + "DVD = (RLK, JPD)\n"
            + "PQP = (LGN, SFD)\n"
            + "FSM = (JDC, RJK)\n"
            + "PSN = (XJS, NRN)\n"
            + "QDN = (SHC, QGJ)\n"
            + "RJN = (XPD, GMS)\n"
            + "HRT = (PPQ, XTT)\n"
            + "CBH = (SRM, KCV)\n"
            + "FSC = (XBV, MTG)\n"
            + "DCX = (CLX, PFC)\n"
            + "XQR = (GSG, JSF)\n"
            + "HBP = (XDT, KNF)\n"
            + "BQJ = (KNT, SDP)\n"
            + "CDJ = (LFM, LCT)\n"
            + "JNK = (MQQ, QJX)\n"
            + "BVP = (MTF, SDC)\n"
            + "TLR = (RHC, NLP)\n"
            + "SJK = (DQP, LMN)\n"
            + "NJG = (MFR, MFR)\n"
            + "RLK = (XCX, PQP)\n"
            + "TPH = (BXH, GSQ)\n"
            + "NSK = (DDS, MLV)\n"
            + "HLQ = (FBV, VNH)\n"
            + "JTP = (FSN, QQQ)\n"
            + "PGH = (KQN, GQR)\n"
            + "SRJ = (PXK, GDL)\n"
            + "TJR = (FHR, CRH)\n"
            + "XDT = (BKJ, PPJ)\n"
            + "GQH = (RLV, THP)\n"
            + "GRS = (BDL, VSG)\n"
            + "DLJ = (CRF, VBM)\n"
            + "VMP = (GJD, NSQ)\n"
            + "MKM = (VTG, BDC)\n"
            + "PVF = (VLX, LBB)\n"
            + "GPV = (SRJ, FNQ)\n"
            + "NTL = (FSN, QQQ)\n"
            + "FQL = (BFR, MDM)\n"
            + "TMJ = (MLM, GLJ)\n"
            + "XKT = (GXT, BSF)\n"
            + "PCX = (NGM, CPL)\n"
            + "XMV = (HQB, JRJ)\n"
            + "QKH = (FLL, JJG)\n"
            + "VQP = (FLG, DDL)\n"
            + "SLS = (CKK, HVF)\n"
            + "THM = (RDQ, DVG)\n"
            + "PPJ = (GCT, TNX)\n"
            + "TMM = (BGH, SPS)\n"
            + "GVL = (PCG, RQS)\n"
            + "DCF = (TSX, THR)\n"
            + "BJK = (FRS, VSX)\n"
            + "SPP = (NNX, LVQ)\n"
            + "QGX = (QMJ, JHS)\n"
            + "RPV = (HGR, DHP)\n"
            + "MTG = (DGJ, QJN)\n"
            + "KGL = (XGD, MQC)\n"
            + "DHD = (RND, JBQ)\n"
            + "BXD = (KFH, HTM)\n"
            + "KGX = (MPD, BST)\n"
            + "QVB = (LKT, RGT)\n"
            + "CBK = (RDG, PKT)\n"
            + "BTB = (JMJ, CTD)\n"
            + "FSN = (DVD, GHK)\n"
            + "KXR = (FFT, DVQ)\n"
            + "TML = (GPV, PVN)\n"
            + "VXF = (PNP, LLH)\n"
            + "DBH = (SQF, VMB)\n"
            + "FCP = (JKK, LFD)\n"
            + "RXQ = (DJN, RFJ)\n"
            + "NTH = (SDC, MTF)\n"
            + "JBM = (SVX, JBD)\n"
            + "PNN = (FJX, SLZ)\n"
            + "GQR = (QQF, RGV)\n"
            + "PXR = (LRP, XKT)\n"
            + "VRK = (RDJ, SMN)\n"
            + "LDB = (RHC, NLP)\n"
            + "LHV = (RXH, ZZZ)\n"
            + "FNB = (DBH, BHQ)\n"
            + "MFM = (VMP, GQC)\n"
            + "PGV = (PKT, RDG)\n"
            + "SPR = (XJP, SHD)\n"
            + "CCR = (LQF, NXD)\n"
            + "GJC = (XRQ, PQB)\n"
            + "LGN = (GRS, DLD)\n"
            + "RDG = (FBD, NML)\n"
            + "MCP = (DLC, TGK)\n"
            + "NMD = (XFR, GRK)\n"
            + "MVK = (TRJ, RNM)\n"
            + "JKF = (TFX, KHJ)\n"
            + "XFR = (SMG, JNQ)\n"
            + "NGM = (XPX, JLX)\n"
            + "MFD = (GVL, MBR)\n"
            + "RNT = (CDR, BCL)\n"
            + "VVX = (XMJ, XMJ)\n"
            + "GNC = (HST, GJR)\n"
            + "CRF = (PBK, GJM)\n"
            + "JKK = (GCQ, SGC)\n"
            + "GBH = (QDR, RFF)\n"
            + "FJG = (XMQ, KSN)\n"
            + "GDV = (GQN, GXH)\n"
            + "XLB = (FMN, JVN)\n"
            + "KNV = (JBD, SVX)\n"
            + "PXX = (HHG, TTQ)\n"
            + "TDJ = (MFD, QJT)\n"
            + "QLG = (PJN, VFS)\n"
            + "NRN = (HBG, FRX)\n"
            + "SHM = (GRK, XFR)\n"
            + "FHV = (HXX, NQV)\n"
            + "QFH = (GNC, CHX)\n"
            + "PCM = (QLQ, MPH)\n"
            + "VLX = (QMR, PBJ)\n"
            + "RPP = (HRT, RBK)\n"
            + "JXR = (SJK, PTL)\n"
            + "LPQ = (QDR, RFF)\n"
            + "BFR = (STC, PJT)\n"
            + "XTT = (CBC, DSH)\n"
            + "HVF = (VTD, KDC)\n"
            + "JFJ = (FCP, BHF)\n"
            + "LVQ = (PRG, MQP)\n"
            + "JFD = (RBH, DFJ)\n"
            + "HFM = (TPJ, JGX)\n"
            + "BSV = (XQR, PMH)\n"
            + "JLC = (GGR, TFM)\n"
            + "NSQ = (FHV, SCB)\n"
            + "NCP = (VHB, MCP)\n"
            + "JKB = (LDB, TLR)\n"
            + "BLX = (PDJ, GBX)\n"
            + "SVP = (BQJ, BFJ)\n"
            + "VSP = (CHX, GNC)\n"
            + "SPH = (FJB, FQN)\n"
            + "RPS = (VNF, BXD)\n"
            + "QMR = (TKD, XLJ)\n"
            + "QMJ = (MXS, PGH)\n"
            + "JNB = (LGL, SRX)\n"
            + "RGM = (JTP, NTL)\n"
            + "GHK = (JPD, RLK)\n"
            + "TFX = (NJG, NJG)\n"
            + "NBQ = (JKP, NLS)\n"
            + "NTX = (VFS, PJN)\n"
            + "QTS = (RQV, JMD)\n"
            + "LMN = (DSS, PBL)\n"
            + "CLK = (SRM, KCV)\n"
            + "MPD = (RMD, DRB)\n"
            + "PDS = (DDS, MLV)\n"
            + "NNX = (PRG, MQP)\n"
            + "BST = (DRB, RMD)\n"
            + "DSG = (SGV, DVB)\n"
            + "KDC = (QVL, KLC)\n"
            + "VKX = (PSN, DSC)\n"
            + "LJM = (DBB, QXN)\n"
            + "VFV = (SHC, QGJ)\n"
            + "FXR = (RJN, RXD)\n"
            + "HGR = (HPS, MNQ)\n"
            + "BMN = (CCR, RPM)\n"
            + "CRH = (FSC, HTX)\n"
            + "QRV = (BBX, FFJ)\n"
            + "CKK = (VTD, KDC)\n"
            + "SDP = (RNT, RPN)\n"
            + "XLJ = (JTX, QRN)\n"
            + "BSL = (PFL, GLN)\n"
            + "GJD = (FHV, SCB)\n"
            + "VNH = (DCJ, CXG)\n"
            + "BCB = (MXJ, LVR)\n"
            + "NBF = (MPH, QLQ)\n"
            + "MCK = (DVQ, FFT)\n"
            + "RFJ = (HFM, JFK)\n"
            + "BBD = (LJM, NXN)\n"
            + "FMN = (SPR, DMJ)\n"
            + "JXK = (GPK, VQP)\n"
            + "SLL = (MHT, CDG)\n"
            + "TRR = (GNM, CSC)\n"
            + "MJC = (KXR, MCK)\n"
            + "MHT = (FBC, TJF)\n"
            + "TSF = (HDH, RGM)\n"
            + "FLG = (FQL, XQD)\n"
            + "MGX = (SLL, FQH)\n"
            + "RGR = (NMN, PXX)\n"
            + "RDA = (BVG, DJM)\n"
            + "VXX = (DHD, DLQ)\n"
            + "DXT = (BNV, TJG)\n"
            + "LCL = (DHV, NHN)\n"
            + "CKB = (FNN, FKT)\n"
            + "KNH = (LVR, MXJ)\n"
            + "GSQ = (PGR, NDC)\n"
            + "CFM = (DPB, SHQ)\n"
            + "HDH = (JTP, NTL)\n"
            + "NSF = (VFV, QDN)\n"
            + "HSF = (KSJ, KBM)\n"
            + "GSR = (VLX, LBB)\n"
            + "GCT = (RQX, SJD)\n"
            + "RBN = (XDT, KNF)\n"
            + "XNF = (JNK, CKJ)\n"
            + "TCF = (RBK, HRT)\n"
            + "DPA = (MDS, SHG)\n"
            + "QTG = (JMT, DXT)\n"
            + "RGT = (SBP, BSZ)\n"
            + "XCX = (SFD, LGN)\n"
            + "KSJ = (KDR, GKG)\n"
            + "GQN = (QGX, LVK)\n"
            + "MDM = (PJT, STC)\n"
            + "KKZ = (MKM, QXP)\n"
            + "MQC = (JQL, TML)\n"
            + "VFS = (FDL, BQC)\n"
            + "TJX = (JRJ, HQB)\n"
            + "BSF = (MTT, JFP)\n"
            + "VMD = (PQH, VHC)\n"
            + "JTX = (HBT, MTH)\n"
            + "MCH = (FMN, JVN)\n"
            + "VBK = (MSJ, NBQ)\n"
            + "TBP = (GBH, LPQ)\n"
            + "TVX = (VQP, GPK)\n"
            + "NQN = (SVP, PGB)\n"
            + "SMG = (XLC, NVB)\n"
            + "SHD = (BCB, KNH)\n"
            + "JLF = (SQX, GJC)\n"
            + "GSF = (QTS, NHG)\n"
            + "BDN = (PNX, RGP)\n"
            + "GRK = (SMG, JNQ)\n"
            + "PLV = (TLB, TLB)\n"
            + "SQS = (HTJ, VRH)\n"
            + "PDH = (FXM, RJB)\n"
            + "VGP = (LLL, MNN)\n"
            + "JRQ = (TVT, BLX)\n"
            + "CLX = (PCP, FGB)\n"
            + "PMF = (JDC, RJK)\n"
            + "JRJ = (BRL, MXK)\n"
            + "XMQ = (PPV, HFF)\n"
            + "BVT = (RQT, JKB)\n"
            + "FJT = (BXH, GSQ)\n"
            + "FRT = (TNC, PXR)\n"
            + "QVL = (XLB, MCH)\n"
            + "TNM = (BFK, PBC)\n"
            + "XPX = (BDS, TMM)\n"
            + "XCN = (SHH, BSR)\n"
            + "PKT = (FBD, NML)\n"
            + "TLB = (LKT, LKT)\n"
            + "TFG = (RMV, JLV)\n"
            + "SRN = (MDS, SHG)\n"
            + "FRC = (BHF, FCP)\n"
            + "GGR = (RTC, DKJ)\n"
            + "KFH = (JXK, TVX)\n"
            + "JNQ = (XLC, NVB)\n"
            + "MTF = (RGC, THM)\n"
            + "STT = (RDJ, SMN)\n"
            + "CPL = (XPX, JLX)\n"
            + "FGB = (XPP, QQR)\n"
            + "DLC = (RPP, TCF)\n"
            + "DJM = (QXH, BSQ)\n"
            + "MBH = (SGS, LBJ)\n"
            + "VBD = (RMX, PCX)\n"
            + "CXG = (TRP, CDJ)\n"
            + "NGV = (VMD, BQX)\n"
            + "GQB = (DRN, NXS)\n"
            + "FHR = (HTX, FSC)\n"
            + "DDL = (FQL, XQD)\n"
            + "FBC = (JNP, GQB)\n"
            + "DKJ = (TPH, FJT)\n"
            + "RQB = (GQN, GXH)\n"
            + "LPM = (RDD, MRD)\n"
            + "BKJ = (GCT, TNX)\n"
            + "GMS = (PDH, VHH)\n"
            + "HTM = (JXK, TVX)\n"
            + "PPQ = (CBC, DSH)\n"
            + "MBR = (RQS, PCG)\n"
            + "PJT = (FGJ, QGS)\n"
            + "PQH = (RBN, HBP)\n"
            + "CBT = (RXH, RXH)\n"
            + "CHX = (HST, GJR)\n"
            + "BQC = (JCT, TRR)\n"
            + "NJK = (JMJ, CTD)\n"
            + "QVX = (VRH, HTJ)\n"
            + "KKM = (FTX, CCB)\n"
            + "NXN = (DBB, QXN)\n"
            + "JQL = (GPV, PVN)\n"
            + "MFR = (QXP, MKM)\n"
            + "VML = (HGR, DHP)\n"
            + "PCJ = (THP, RLV)\n"
            + "XRQ = (BVP, NTH)\n"
            + "PXK = (PBD, BJK)\n"
            + "HCX = (HFS, HSF)\n"
            + "QJT = (MBR, GVL)\n"
            + "RLT = (BTX, QKH)\n"
            + "DKG = (QBQ, MPL)\n"
            + "CQP = (TSF, MVT)\n"
            + "HFF = (VBD, SNX)\n"
            + "KNF = (BKJ, PPJ)\n"
            + "FFT = (JFJ, FRC)\n"
            + "DDS = (PGK, DSG)\n"
            + "PFL = (SGB, SFQ)\n"
            + "RXS = (CPC, NQN)\n"
            + "XSV = (XCN, LPT)\n"
            + "MNQ = (VXV, RFQ)\n"
            + "PVN = (SRJ, FNQ)\n"
            + "VNF = (KFH, HTM)\n"
            + "HPQ = (HVF, CKK)\n"
            + "PGK = (DVB, SGV)\n"
            + "VHC = (HBP, RBN)\n"
            + "GBX = (SRN, RXZ)\n"
            + "SGV = (CBK, PGV)\n"
            + "TVV = (QLG, NTX)\n"
            + "KNT = (RPN, RNT)\n"
            + "TXB = (NSF, QJM)\n"
            + "PCP = (XPP, QQR)\n"
            + "PCG = (BDV, VXX)\n"
            + "MQF = (LSC, JTB)\n"
            + "QJN = (CKB, QSX)\n"
            + "QXH = (SVD, XSD)\n"
            + "LCT = (PCJ, GQH)\n"
            + "GKG = (HDN, HJJ)\n"
            + "TKD = (JTX, QRN)\n"
            + "KBQ = (XCN, LPT)\n"
            + "KSM = (VKX, BGL)\n"
            + "MQQ = (NQP, NVQ)\n"
            + "VFF = (HFS, HSF)\n"
            + "SSX = (TVT, TVT)\n"
            + "DSS = (VVX, VVX)\n"
            + "QDR = (SPH, BXM)\n"
            + "PGR = (RGK, RGK)\n"
            + "RML = (QRV, XXD)\n"
            + "XDR = (JNS, FXR)\n"
            + "DVB = (PGV, CBK)\n"
            + "TSX = (QBX, DLJ)\n"
            + "QBQ = (TJR, JSJ)\n"
            + "BBX = (LJF, BSV)\n"
            + "PTL = (DQP, LMN)\n"
            + "PBC = (BBD, SKJ)\n"
            + "VHB = (DLC, TGK)\n"
            + "XJP = (BCB, KNH)\n"
            + "STC = (QGS, FGJ)\n"
            + "FNQ = (PXK, GDL)\n"
            + "MXJ = (LHK, BBB)\n"
            + "JNP = (NXS, DRN)\n"
            + "SGS = (TBP, VNK)\n"
            + "RFQ = (SHM, NMD)\n"
            + "MLV = (DSG, PGK)\n"
            + "CDR = (VBK, JHN)\n"
            + "CTD = (DCX, BNG)\n"
            + "FRD = (FJX, FJX)\n"
            + "GCQ = (FCH, JLC)\n"
            + "NXS = (KGL, LTN)\n"
            + "JBQ = (SBC, XFF)\n"
            + "NLD = (DKM, TDJ)\n"
            + "VTG = (RBL, RPS)\n"
            + "JJG = (GSR, PVF)\n"
            + "DKM = (QJT, MFD)\n"
            + "RDJ = (LFN, FVJ)\n"
            + "KTJ = (RPM, CCR)\n"
            + "GSG = (FRT, MVG)\n"
            + "MTL = (JLF, MTS)\n"
            + "PNP = (RPV, VML)\n"
            + "TTG = (MBH, GJX)\n"
            + "LSC = (VDP, BSL)\n"
            + "THR = (DLJ, QBX)\n"
            + "NQV = (BVT, XQK)\n"
            + "LBB = (PBJ, QMR)\n"
            + "NQQ = (KTJ, BMN)\n"
            + "DMJ = (XJP, SHD)\n"
            + "DSC = (XJS, NRN)\n"
            + "RXD = (GMS, XPD)\n"
            + "KBM = (GKG, KDR)\n"
            + "LLP = (LLL, MNN)\n"
            + "HNM = (VMD, BQX)\n"
            + "VNG = (VKH, SCV)\n"
            + "XDG = (GKF, CTZ)\n"
            + "PNX = (MFM, JJP)\n"
            + "PBK = (RHJ, NLD)\n"
            + "BVR = (CNF, HCQ)\n"
            + "DHV = (VCC, RXL)\n"
            + "TGK = (RPP, TCF)\n"
            + "RDD = (NJK, BTB)\n"
            + "NMN = (HHG, TTQ)\n"
            + "HJF = (HPJ, SFK)\n"
            + "BDV = (DLQ, DHD)\n"
            + "TVT = (PDJ, PDJ)\n"
            + "BGH = (TRQ, MLP)\n"
            + "FVJ = (RRL, XNF)\n"
            + "DBB = (KKM, CGV)";

    public static void main(String[] args) {
        Util.time(() -> a(Input.parse(TEST_INPUT)));
        Util.time(() -> a(Input.parse(INPUT)));
        Util.time(() -> b(Input.parse(TEST_INPUT_B)));
        Util.time(() -> b(Input.parse(INPUT)));
    }
}
