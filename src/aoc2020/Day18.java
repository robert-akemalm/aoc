package aoc2020;

public class Day18 {
    public static void main(String[] args) {
        b("1 + (2 * 3) + (4 * (5 + 6))");
        b("2 * 3 + (4 * 5)");
        b("5 + (8 * 3 + 9 + 3 * 4 * 3)");
        b("5 * 9 * (7 * 3 * 3 + 9 * 3 + (8 + 6 * 4))");
        b("((2 + 4 * 9) * (6 + 9 * 8 + 6) + 6) + 2 + 4 * 2");
        a(TEST_INPUT);
        a(INPUT);
        b(TEST_INPUT);
        b(INPUT);
    }


    private static void b(String input) {
        S[] rows = input.lines().map(Day18::decorate).map(line -> new S(line.chars().filter(c -> c != ' ').toArray())).toArray(S[]::new);
        long sum = 0;
        for (S row : rows) {
            sum += parseA(row);
        }
        System.out.println(sum);
    }

    // 96386607317072 too high
    private static String decorate(String line) {
        StringBuilder input = new StringBuilder("(" + line + ")");
        StringBuilder result = new StringBuilder();
        for (int i = 0; i < input.length(); i++) {
            if (input.charAt(i) == '+') {
                int numPar = 0;
                for (int j = i-1; j >= 0; j--) {
                    if (result.charAt(j) == ')') {
                        numPar++;
                    } else if (result.charAt(j) == '(') {
                        if (numPar == 0) {
                            String substring = result.substring(j+1);
                            result.delete(j+1, result.length());
                            result.append("(").append(substring);
                            break;
                        }
                        numPar--;
                    } else if (numPar == 0 && (result.charAt(j) == '+' || result.charAt(j) == '*')) {
                        String substring = result.substring(j+1);
                        result.delete(j+1, result.length());
                        result.append("(").append(substring);
                        break;
                    }
                }
                result.append("+");
                for (int j = i+1; j < input.length(); j++) {
                    if (input.charAt(j) == ')') {
                        if (numPar == 0) {
                            String substring = input.substring(j);
                            input.delete(j, input.length());
                            input.append(')').append(substring);
                            break;
                        }
                        numPar--;
                    } else if (input.charAt(j) == '(') {
                        numPar++;
                    } else if (numPar == 0 && (input.charAt(j) == '+' || input.charAt(j) == '*')) {
                        String substring = input.substring(j);
                        input.delete(j, input.length());
                        input.append(')').append(substring);
                        break;
                    }
                }
                i++;
            } else {
                result.append(input.charAt(i));
            }
        }
        String s = result.toString();
        return s;
    }

    private static void a(String input) {
        S[] rows = input.lines().map(line -> new S(line.chars().filter(c -> c != ' ').toArray())).toArray(S[]::new);
        long sum = 0;
        for (S row : rows) {
            sum += parseA(row);
        }
        System.out.println(sum);
    }

    static class S {
        final int[] chars;
        int ix = 0;

        S(int[] chars) {
            this.chars = chars;
        }

        public int next() {
            return ix < chars.length ? chars[ix++] : -1;
        }
    }

    static long parseA(S line) {
        long val = 0;
        boolean add = true;
        for (int ch = line.next(); ch != -1 ; ch = line.next()) {
            if (Character.isDigit(ch)) {
                if (add) {
                    val += ch - '0';
                } else {
                    val *= (ch - '0');
                }
            } else if (ch == '+') {
                add = true;
            } else if (ch == '*') {
                add = false;
            } else if (ch == '(') {
                if (add) {
                    val += parseA(line);
                } else {
                    val *= parseA(line);
                }
            } else if(ch == ')') {
                return val;
            }
        }
        return val;
    }

    private static final String TEST_INPUT = "1 + (2 * 3) + (4 * (5 + 6))";

    private static final String INPUT = "(9 * 3 + 4) * (7 + (2 + 3 + 6 * 2) + 3) * 4 * 5\n"
                                        + "(8 + 4 + 9 + (7 * 9 + 4 + 6 + 9) * 3) + 6 + 5 + ((8 * 2) + 2 * 9) * 5\n"
                                        + "5 * 6 * 8 * (9 + 7 * 8 * 9) + 6 + 2\n"
                                        + "9 * 9 + (4 * (6 * 7 * 7 + 4 * 6) * 5 + 6 * (2 * 5)) * (8 + 7 + 6 + 2 * 7) + 5\n"
                                        + "5 + (7 + 3 * 7 + 9 * (7 + 7 + 4 + 3 * 3)) + 8 * 4\n"
                                        + "(6 + 2 + 5 + 4) * 2 * 9 * 2 * 8\n"
                                        + "7 + 8 + ((4 + 6 + 6) * 6 + 9 + 3 * 8 + 9) + 5\n"
                                        + "3 + ((6 * 6 * 7 * 6) * 6 + 6 * 4) + (2 + 5 * 6 + 6 + (2 * 4) + 6) * 9\n"
                                        + "(2 * (4 * 9 * 3) * 8 + 6 + (7 + 2 + 6)) * 6 * (5 * 4 + 8 + 7 + (7 + 2 * 3))\n"
                                        + "8 * ((7 + 4 + 9) * 5 + 6 + (4 + 9 + 8 * 3 * 8 + 3) * 5 * (5 + 8 + 7 + 3 * 7 * 4))\n"
                                        + "6 * 5 * 5 + (8 * 5 * 8 * 5 + 7) + ((2 + 2 * 6 * 3) * 4) * 6\n"
                                        + "2 + 2 * 9 + 8 * (3 * 7 * 7 * (2 + 5) * 3 + 2)\n"
                                        + "6 + 2\n"
                                        + "9 * 2 + ((6 * 7 * 7 * 2) + 8) + (7 * (4 * 6 + 7) * 2 * 2 * 9) + 4 * 8\n"
                                        + "(7 * 9 + 9 * 2 * 4 * 9) + 4 * 2 * 9 + 6\n"
                                        + "6 * 3 + 7 + 9 + 9 + ((6 + 6 + 7 * 5) * 6 * 8 * 5)\n"
                                        + "((8 * 8 * 6 + 6 * 4) + 3 + 3 + (3 * 5 + 3 * 5 + 4 + 7)) * 8 + (6 + 7 * 2 + 2) + (9 + 9)\n"
                                        + "7 + 8 + 3 * 5 + (5 * 5 + 6 + 6) * (9 * 6)\n"
                                        + "5 + 5 + 2\n"
                                        + "((3 + 3) * 2 + (5 + 8 * 2 + 4 * 3)) * 8\n"
                                        + "((5 + 6 + 5 * 8 + 4) + 9 + (5 + 5)) * (7 * 2 + (8 + 7)) + 9\n"
                                        + "9 * (9 * 8) + (3 * 2 * (9 + 2 * 9 * 5) * 4 * 2) + 5\n"
                                        + "4 * 4 + (2 + 5 + 5 * (3 + 6 * 4 + 7)) * (2 * 2) + 6\n"
                                        + "6 + 2\n"
                                        + "6 + 5 + (4 + 8) + 5\n"
                                        + "6 * (4 * 6) + (4 * 5 + 4 + 5 + 9) + 7 * (2 + 7 + 9)\n"
                                        + "9 * (3 * (5 + 9 * 4 * 5 + 3 * 9)) + ((4 * 4 * 3 * 6) * (9 * 8 * 3) * 9 * 9) + 3\n"
                                        + "5 + (6 * (3 + 9 + 7 * 6 + 2) * (2 + 4 * 2 * 4 * 6) * 9 + 3) + 6 + 8 + 5 * 3\n"
                                        + "8 + 9 * (8 + (3 + 2 + 4) * 4 + 3 * 4 * 5)\n"
                                        + "9 + 5 + 8 + 9 * (8 + (4 * 2 * 9 + 8 + 7) * (8 + 6 * 3) * 7 * 7)\n"
                                        + "6 * ((9 + 2) * (7 + 8 + 5 + 9 * 7) * 4) * 4 * ((7 + 7 + 4 * 5 * 2) + 2) + 9\n"
                                        + "(4 + 9 * 8) * (6 + (7 * 6) * 9 + 8 * 2 * 7) + 4 + 9 + 3 * (6 + 8 + (8 * 4 + 7 * 3) * 8)\n"
                                        + "(5 * 9 * 2 * 7 * 8 + 6) + (5 + 5)\n"
                                        + "6 + 7 * 9 + 3\n"
                                        + "((7 + 8 * 3 * 7 + 5) * 7 * 5 + 6 * 6 + 5) + 9 + 4\n"
                                        + "(5 * 2 * 4 * 9 * 2 + (8 + 6 * 7 + 6)) + ((4 * 4 * 6 * 9 + 7) + 9 * 7)\n"
                                        + "(3 + (5 * 8 + 4 + 4 * 7)) * 7 + 8 + (7 + (3 * 5 * 4 + 6 + 9)) + ((7 + 2 + 7 * 9 + 6 * 8) + 3 + 3 + (2 * 9 * 7) + 4 + (6 + 3 * 5)) * 9\n"
                                        + "5 * 4 + ((6 + 8 * 5 * 6) * 8) + 7 + 7\n"
                                        + "5 * (4 * (2 * 9 * 7 * 7) * 5) + ((6 * 2 * 9 + 2) * 3 * 2 + 7 + 3) + 9 + 8\n"
                                        + "(7 + 3 * 3 * 6 * 2 * 3) * 6 + 3 * ((3 * 4 * 3 * 9 * 7) + 9 + 8) * 9\n"
                                        + "((4 + 8 * 9) + 5 * 4 * 2 * 8 * 4) * (6 + 2 * (9 + 5) * 9 * 7 + 8)\n"
                                        + "9 + 8 + (3 * 3 * (9 + 2 + 8 * 7 * 9))\n"
                                        + "(5 * 8 * (7 * 2 + 8)) + 2 * 8 + 8 + 6 * 5\n"
                                        + "2 + (2 * 9 * 5 + 4) * (5 + 9 * 3 * 4) * 4 + 2\n"
                                        + "8 * 2 * (7 * 7 * 4 + 5 + 9 + 4)\n"
                                        + "4 * 9 + 2 * 8\n"
                                        + "6 + 2 + ((5 + 3 * 5 + 7 + 9) + 4 * 6 + 6) * 5\n"
                                        + "(8 * 3 * 7) + (4 * 5 + 8 * 7 + 6)\n"
                                        + "3 * 7 * ((3 + 3 * 5 + 9 + 7) + 9 * 2 + (4 + 3))\n"
                                        + "(4 + 2 * 2 + 3 * 2 + 2) * 4 + 2 * 4 + 6 + 3\n"
                                        + "((9 * 7 * 7 + 8) * (2 * 5 + 2 + 3) * 2 * 4 * 7) * 9 + 5 + 5\n"
                                        + "4 + 9 * 2 + 5 + (3 + 5 + (4 + 3 * 3 * 7 * 5 * 8) + 9 * 2 * 2) * (4 + (2 * 6) + 7 * 5 * 7 + 2)\n"
                                        + "6 + 2 * 4 * (6 + 8) * (4 + 2) * 3\n"
                                        + "3 + ((8 + 8 + 6) * 5) + 9 + 7 + ((7 * 2 * 9 + 5 * 3 + 5) + 3 + (2 * 5) + 3 + 5)\n"
                                        + "4 + 2 * 6 + 6 + 6\n"
                                        + "(5 * (4 * 9 * 8 + 5 * 8) * 6 * 9 + 3) * ((2 * 7 * 3 + 3 * 4 * 3) + 9 + 8 + 8) + 4\n"
                                        + "4 * 4 + 9 * 9 + (2 * (6 * 5 + 9 + 7 * 3) + (2 * 8 + 3 + 2 + 3))\n"
                                        + "6 * 4 + 5 * (6 * (6 * 7 + 2 * 6 + 4 * 7)) * 4 + ((5 * 9 * 8 * 9 * 5 * 5) * 5)\n"
                                        + "3 + (5 * 4 + (3 + 6 * 2 + 8 + 7 * 8) + 3 + (9 + 8 * 6)) * (5 + 6 * (8 * 9 + 4 * 9 + 5) * 7 * 5) + 5\n"
                                        + "9 + 2 + 9 + (3 + 9) + (4 * 4 + 7 * 5) + 5\n"
                                        + "5 + 6\n"
                                        + "6 + (7 + 2 * 6 * 9 * 7 + 5) * 9 + (4 * 5 * 8) + 2 * 3\n"
                                        + "8 + 7 * (9 + (9 + 3 * 3 * 7) * (5 + 6 * 3 * 7 + 8 * 2)) * 7\n"
                                        + "(5 * 7 + 5 + 3 + 6) * 8\n"
                                        + "5 + ((9 + 5) + 9 + 4 * (5 * 4 * 7 + 3) * 3)\n"
                                        + "5 * 8 * 7 + 8 * ((8 + 9 + 3 * 6 * 5) * 4 * 9 + 4)\n"
                                        + "8 * (6 + (6 + 9 * 7 * 8 * 7) + 7 * 2) + ((2 * 9) * 7) + 4\n"
                                        + "6 + ((4 + 5 + 6 + 7) * 7)\n"
                                        + "8 * (5 * 6 * 4 * 8 + 6 * 6) + 2 * 9\n"
                                        + "7 + 3 + 2 * (6 + 8)\n"
                                        + "9 * ((4 + 4 * 9 + 6 * 8 * 7) + 9 + 2 + 6 * (4 * 9 + 7 + 6) * 3) * 5 + 7\n"
                                        + "((2 + 3 * 2 * 9 + 6) + 4 + 8 * 2 * 5 + 8) * 5 + 5 + (9 * 6) + 9 + (3 * 2 * 8)\n"
                                        + "4 + (6 + 2) * 9 + (5 + 4 * (8 * 3 + 7 + 6) * 4) * ((7 + 2 + 3) * 6 + 9 * (6 + 7 * 2))\n"
                                        + "6 + 2 + ((2 * 4 * 8) * 2 * 4 * 7 + 9) * (7 + 8 + (6 + 7 * 9 + 9 * 7) + 4) * 8\n"
                                        + "9 * 9 + 7 + 9 * (9 * 4) * 9\n"
                                        + "(7 * 3 + (3 * 7 + 4 * 4 * 8) * 2 * 2 * (3 * 3)) + 8\n"
                                        + "9 * 6 + 3 * (2 * 5 * 7 * 7 + 7) * 8 + (2 + 4)\n"
                                        + "(8 * 9) + 8 * 6\n"
                                        + "(3 * 2 + 6 + (7 * 8 * 5 * 4)) + 5 * 6\n"
                                        + "4 + 3 + (9 + 3 + (2 * 9 * 6) + 7) * 8 + 3 * 8\n"
                                        + "9 + 6 * 8 + 4 + 9 * (9 * (8 * 4 + 9) + 3)\n"
                                        + "5 + 4 * 6 * (8 * (2 + 9 + 6) * (6 * 3 + 2) + 6) * (8 * 8 * 3 * (6 * 9) * 3 + (4 + 4 + 2 * 2 * 6)) + 6\n"
                                        + "4 + (6 + 6 * (4 * 7 * 7) + 5) * 5 + 6 * (7 + 2 * 4 * 2 + 9 + 9)\n"
                                        + "((8 + 7) * (7 + 5 * 9) + (9 + 2 * 6 * 2) + 6 * 7) * (3 + 3 * 2 + 3 + 7) * 4 + 7 * 7\n"
                                        + "(6 + 9 * 7 * 4 + 7) * 6 + 7 + 5 + 3 + 8\n"
                                        + "9 + 2 + (9 * (8 * 9 * 2 * 6 + 2 + 5)) + 6 + 4 + 8\n"
                                        + "6 + 4 * ((2 * 9) * 6 * 5) + 2 * 9\n"
                                        + "(6 + 8 * 2 + (5 + 2 * 7 * 7) * 5 + 4) * (2 * 3 + 8 * (9 + 6 * 4 + 3 + 6 + 4) * (2 + 5 * 8 * 2 + 4))\n"
                                        + "3 + (9 * (2 * 7 * 6) * 9 + 7 + 3) + (7 * (5 * 6 + 7) + 3 * (5 * 7 * 5 * 4) * 8 + 6) * 4 * 5 + 9\n"
                                        + "(6 + 6 + 4) + 3 * 4 + 3\n"
                                        + "9 * (2 * 7 + 9 + (4 + 2) * 5) + (2 + 5 + (7 + 6)) * 8\n"
                                        + "2 * (6 * 6 * 9 + 8) + 4 * 2\n"
                                        + "((4 * 3) + 8) + 5 + 5\n"
                                        + "5 + 8 * 7 + 6 + 6 * ((9 * 2 * 5 + 4 * 7) + 8 + 6 + 5 + (3 + 7))\n"
                                        + "8 + (8 * 8 * 8 * (3 * 7 * 8) * 4) * 8 + 5 * 8 * 3\n"
                                        + "(8 * 3 * 8) * 4 * 3 * 3 * 6\n"
                                        + "5 + 6 * (9 + (5 + 6 + 8 + 3 * 4) * (6 * 3 + 3 + 4 * 6 + 2))\n"
                                        + "3 * (2 * (5 * 9) * 5 + 8 + 5 * 6) * 8 + (8 + 5 + 7 * (6 + 5 + 9 * 2 * 9) + 2 * (3 * 2 * 2 + 9 * 4))\n"
                                        + "(2 * 8 + 5 + 7 + (8 + 2 + 7 * 5 * 5 + 4) * 2) + 5 * ((8 * 7 + 5) * 3 * 4 + (4 * 7 * 6) * (7 + 6 + 4 + 7 * 7) + (8 * 7 + 2 * 2 + 9 + 3)) + ((4 + 8) + 9)\n"
                                        + "3 * (8 + (2 + 9) + 2 * 8 + (9 * 4 * 9)) * 2 * 3 * 4\n"
                                        + "(4 + (9 * 4) + 5) * 8 * (3 + 7 * 3 * 7 + 4) * 7 * 2\n"
                                        + "2 * 4 * (2 * 8 + 9 + 7 + (8 * 3 * 6 + 3 + 5) + 9) + (5 * 8 * 8 + (4 * 5 * 2 + 4 * 2 + 5) * 4) + 2 * 6\n"
                                        + "7 + 8 + ((5 + 7 + 2 + 9 * 4 * 3) * 4) + 7 + 6 + 8\n"
                                        + "((4 + 4 * 4 * 9 * 6 + 9) * (7 + 9) * 2 + 8) * 8 * 6 + 9\n"
                                        + "(2 * (6 + 7 * 3 + 6 * 7) + 4 * 2 + (3 + 8 + 9) * 8) * 8 + 8 + 8 + (2 + 8 * 5 * 9)\n"
                                        + "(7 + 5 + (7 + 9 + 5) + 2) * 4 + 9\n"
                                        + "3 * 6 + 8 + 2 * 7\n"
                                        + "6 + 2 + ((7 * 6 + 3 + 4) * 8 * (2 + 6 * 5) * 6) + 4 * 2\n"
                                        + "(4 * 8) + 7 * 3 + 3 * 7 + 5\n"
                                        + "5 + 6 + 3 + 7 * (2 * 7) + (5 + (3 + 4 + 3 + 4 + 7) + 8)\n"
                                        + "2 + ((4 + 7 * 6) + 8 + 9 * 6 * 9)\n"
                                        + "(6 * 2) * (7 + 5 * (7 * 6 + 7 + 3 + 8 + 7) + 2 + 5 + 8) + 6\n"
                                        + "(3 * 2 * 8 + 7) + (5 * 4 * 9 + 6) + 4 * 3 + 4\n"
                                        + "8 + (8 + 2 * 3 + 2 + 2)\n"
                                        + "(7 + 8 * 5) * (3 * (9 + 5 + 6 + 9 + 3 + 9) * 3) + 8 + 7 * (5 + 9 + 3 * 2 + 4 + 5) + 4\n"
                                        + "7 * ((6 * 7 * 2 * 9 + 8) + 8 * 6 * 8 * 5) * 2 + 3 + 8 * 3\n"
                                        + "(4 + (5 * 7 + 3 + 4 + 9)) * 7\n"
                                        + "7 * 5 * 2 * (4 + 4 + 6 + 3 * 7) + (8 * (6 + 2 + 8 * 9 + 6) * 3 * 6 + 3 + (4 + 5 + 9)) * 7\n"
                                        + "3 * 4 + 2\n"
                                        + "((6 + 9 + 5 + 4 + 9 * 7) * 9 + 8 + (9 * 2 * 6 * 4 * 7 * 3)) + (8 + 6 + 7 + 4) * 9 * (8 * 5) + 7\n"
                                        + "(9 * 8 + 4) + (3 * 4 + (9 * 5 * 3 * 4) * 9)\n"
                                        + "(7 + 8 * 3 + 6 * (4 + 5 + 7 * 8 + 9) + 4) * 3\n"
                                        + "((7 * 4) + (6 * 7 * 6) * 7 + 9 * 3) + 2 * (4 + 8) + (4 * 5 + 8 + 8 + 5) * (4 + 9) * 5\n"
                                        + "(2 + 3 + 7) * 6 + 8 + (4 + 7 * 6 * (3 + 4 + 4 + 7 * 6) * 8 + 3) * 4\n"
                                        + "6 * (8 * 3 + 4 * (6 + 9 * 2 + 3 + 8 * 5) * 8 + 6)\n"
                                        + "8 + ((2 * 8 + 5 * 5 * 5 * 3) * 9 + 5) + 9\n"
                                        + "(8 + 4 * 9 * 8) + 5 * 5 * (7 + 7 + 2 * 9 + 8 * 6) + 6 * (6 * 6 + 6 + 3 + 9 * 8)\n"
                                        + "5 * 9 + (5 + (9 * 5 + 7) + (2 + 2 * 7) * 4) * (9 * 9 + 5 * 4) + 9\n"
                                        + "7 + 7 * (2 * 9 * 6 + 3 + 5)\n"
                                        + "2 + (8 * 9 * 7 * (4 * 9 + 9 * 4 + 5) + 4 * 4) + 5 + 2 + 8\n"
                                        + "(2 + (4 + 9 + 4 * 7 * 3) + 4 + 8) + (2 + 4 * 5 * (3 + 4) + 8 * 5)\n"
                                        + "2 + ((7 * 8 + 6 * 6) * 4 + 6 + 7 * 6 * 9) + ((7 + 9 * 5 * 5) + 4 * 9 + 6 + 7) * ((6 + 9 + 4 * 7 * 2) * 7 + 9 * (7 + 2 + 3 * 3 + 5) * 5)\n"
                                        + "(3 * 8 + 2 * 2 + (3 * 7 + 8 * 5 * 6) + 6) + 4 + 5\n"
                                        + "8 + 5 * 8 + 7 * 2\n"
                                        + "(3 + (6 * 9 * 8 + 4 + 8) * 4 + 2) + 8\n"
                                        + "(7 + 7) + 5 * (9 * 2 + 9) + ((4 * 3 * 3 * 4 + 4 * 9) * 8 * 8 + (3 * 9 + 7 + 8) * 3 + 9)\n"
                                        + "(6 + (5 + 7 * 5) * 8 * 9) * 6 + 3\n"
                                        + "3 + 2 * (5 * 8) + 5 + 6\n"
                                        + "7 * 4 + 7 + 7 * 4 * (4 + 9 * 6 * 5)\n"
                                        + "3 + 4 + (6 * 9) * (6 + (5 * 5 + 6 * 8) + 9 * (7 * 3 + 6)) + 8\n"
                                        + "4 + 4 * 6 * ((4 * 3 * 2) * 4 + 3 + (7 + 8 + 7 * 6 * 9 * 3)) * (5 + 8)\n"
                                        + "(6 + 7 * 8 + 3 + 9) * 5 * 3 * 3\n"
                                        + "8 + 5 + 3 * 8 * 2 + 9\n"
                                        + "(9 * (5 + 8 + 4 + 4 + 9 + 4) * 2 + 7 * (6 * 4 + 7 + 4 + 8)) + 9 + 5\n"
                                        + "7 + 7 * 3 + 8 * ((5 + 3 * 4 * 9) * 4 * 6 * 8)\n"
                                        + "2 + 5 + 8 + (3 + 3 * 4 + 8)\n"
                                        + "5 + 4 * 3 * 9 + ((5 * 2 * 2) * 5 + 4 + (4 * 2))\n"
                                        + "(3 * 7 + 2) * 3\n"
                                        + "8 + 7 * 3 + 9 + 9 * 5\n"
                                        + "2 + (2 * 6 + 3 + (4 + 3 + 4 + 2 + 7 * 9)) + 8 + 2 * 7 * 9\n"
                                        + "(4 * 4 + 4 + 7) * 8 + 5\n"
                                        + "2 * (5 * (8 * 5 * 2 * 6 * 8) * 6 * 3 + 8 * 8)\n"
                                        + "8 + 3 * 9 + 5 * 9 * (5 * 7 + 6 + 5 * 3 + 7)\n"
                                        + "2 + (3 + 7) * 8 * 9\n"
                                        + "7 + 9 + 6\n"
                                        + "4 + (6 + 7 + 8 + 4 * 5) + 2 * 6 * 8 * 2\n"
                                        + "(9 + 3 * 7 * 3) * 8 + (9 + 5 * 2 * 8 + 3 * 4) * 8 + 2 * 6\n"
                                        + "4 + 2 * 3 * 6 * ((3 * 5 * 3) * 2 + 6 + 5 * 4)\n"
                                        + "3 + 9 * (7 * (8 + 7) * 9 * 7 + 7)\n"
                                        + "6 + 3 * 6 + 4 * (7 * 7 + 2 * 9 + 4 + 2) + (6 + 6 + 6 + 7)\n"
                                        + "(5 * 4) * 6 * (5 + 4 + 5 + 3 * (8 * 6) * 5) * 7\n"
                                        + "(8 * 4) + 2 * (2 * 2 * (9 * 9 + 8) + 8 * 9 + 6) * 7\n"
                                        + "3 + 5 * (4 + 9 + 3) + 9 * ((5 * 2 * 4 + 2) + 6 + 7 + 7 + 5)\n"
                                        + "(3 + (9 + 7 * 3 + 6 * 6)) + 9 * 7 * 4 + (9 * 4 * 9 + 7 * 7 * 7)\n"
                                        + "(3 * 7) + 4\n"
                                        + "4 + (2 + 5 * 5) + 6 + 2 * 8 + 9\n"
                                        + "8 * (6 * (7 * 3) + 8 + 5 + 8 + (8 * 2 + 6 + 9 + 4 * 3))\n"
                                        + "7 * 8 * (5 * (2 * 6 * 9) * 3 * 6 * (6 + 8 + 5))\n"
                                        + "(5 + 9 * 4 * 7 * 7 + 8) + 4\n"
                                        + "((8 * 9 * 6 + 4 * 6 + 3) * 6 + 2 * (4 + 8) * 7) + (4 + 4) + (7 + 7 * 7 * (4 + 5 + 2))\n"
                                        + "(4 + (8 + 4 * 4 * 2 + 4) + 7 + 6 * 2 + 6) * 9 + 3 * 3 * (9 * 9)\n"
                                        + "(9 * 5) * 6 + ((5 + 3) + 9 + 4)\n"
                                        + "7 + ((8 * 9 * 5 + 2 + 2 * 7) * 9 * 3 * 7 * 2) * 6 * 2 + 6 * (9 * 4 * 2 + (2 + 7 + 5) * 4 + 7)\n"
                                        + "8 + (5 * 4 * 7 + 2) * 6 + (6 * 3) * 4\n"
                                        + "7 + (9 + 9 * 4 + 3) * 8 * (9 + (6 + 9 + 2 + 6 + 8) * 9 * 7 * (2 * 8 * 5 * 8)) * (4 + 7 + 8 + 2)\n"
                                        + "6 + 3 * 5 * 8 + ((9 + 5 + 6) * 9 * (3 + 7 * 8 + 6) * (2 * 9 + 5)) + (7 + 6)\n"
                                        + "5 * (9 + 7) + 2 * 4 + 3\n"
                                        + "7 + 2 * (5 + 6 + 9 + 4 * (7 + 6 * 5 * 6 + 8) * 4) * 6 + 4\n"
                                        + "6 * 8 * 8 * 4 + 8 * (2 * (9 * 4 * 7 + 9) * 5)\n"
                                        + "8 * 4 + (4 + 7 * 3 + 5 + 8) + 4 * 7 + ((4 * 9 + 3 * 8) * 5 * 6 + 7 + 5 * 4)\n"
                                        + "(9 * 3 + 3) + 9 + ((9 + 9 + 6 + 8) * 9 + 7) * 4 + 9 * ((8 + 7 + 8 * 2 + 8) * 5 + 8 + 3 * (3 + 5 + 2 * 6) * 8)\n"
                                        + "(8 * 4 * 3) + (4 * 3 * 8 + (5 * 9) * 3 * 9) + 9 + (4 * 2) + 9 + 4\n"
                                        + "2 * 5 + (9 + (5 + 2 * 2 * 7 * 3 * 9))\n"
                                        + "(4 * 2 + 8) + (4 + 5 + 3 + 9 + (9 * 2 * 4) * (2 * 6 + 6))\n"
                                        + "9 * 5 + 2 * ((3 * 3 + 3 + 9 * 7 + 9) * 3 * 3 + 6) + 7\n"
                                        + "8 + (5 + 4 + 9) + ((6 + 9 * 6) * 8 + 3 + 6 * 8 * 6) * ((6 + 4) * (3 + 5 * 7 * 9 * 4 + 3) + (2 * 4)) + 4\n"
                                        + "5 + 7 + (5 + 2 + (5 + 6 * 2) * 7) + 4 * 4\n"
                                        + "(7 * 8 * 8) * (3 * (2 * 3 * 4 + 3 + 5 + 6) + 2 + 9 + (7 + 5 + 7 * 9) + 9) + 2\n"
                                        + "2 * 8 + ((4 + 9 + 6 + 8 * 2 * 9) * 9 * (5 * 7 + 7 * 4 + 3 + 9) * 3 + 2 * 8) * (3 + 7 * 7 * 5 * 3) * 9 * 8\n"
                                        + "6 * 8 * (5 * 7 + 3 * 2 * 3 + 4) + 7 + (4 + 2 * 8 * 8) + ((9 * 4 + 5) * (7 + 6 + 2 * 4))\n"
                                        + "4 + 9 + (9 + 5 + 3 * 8) * 5 * 9\n"
                                        + "5 + 2 + ((6 + 8 + 3 * 7) * 6 * 5 + 8 + 3 * 9) + 6\n"
                                        + "3 + (7 + (3 * 6 * 7) + 9 * 2 * 2 + (9 * 4)) * 8 * 8 * 6\n"
                                        + "((5 + 9 + 8 + 6) + 4 + (3 * 4 + 8) * (2 + 5 * 2 * 6)) + 9 + 8 * 2\n"
                                        + "8 * 9 + 2\n"
                                        + "(3 * (3 * 5 * 2 * 3 * 3) * 3 * 7) * 3 * 6 * 5 + 8\n"
                                        + "6 * 8 + 6 + 9 * 9 * (7 * 2 * 5 * 3 * 4)\n"
                                        + "(8 + 2 + 4 * 3 + (4 * 6 + 7 * 2)) + (6 + 8) + 8\n"
                                        + "9 + 4\n"
                                        + "((4 + 8) + 8 * (4 * 5 + 8 + 2 + 8 * 9) + 7 * (3 * 7 * 4 * 8) + 4) * 6 * 7 * (2 * 3 + 6)\n"
                                        + "6 + (4 + 5 * 9) * 6 + 9\n"
                                        + "(4 * (5 * 3 * 3 * 7 * 2 + 7) + 4) + 4 * 8 * 4 * 3\n"
                                        + "8 + (9 + 8 + 9) * 5\n"
                                        + "9 + 8 + 8 + 9 * (8 * 3)\n"
                                        + "(6 + 8 * 5 * (5 + 7 * 8 + 4 + 3) * 6 + 4) * (2 * 4 * 5) + 7 * 8 + (9 * 6)\n"
                                        + "((9 + 2 + 5 + 5 + 5) + (9 + 6 + 7) * (7 + 5 + 9 + 5 * 6)) * (4 + (7 + 8 + 9 + 7) * (7 + 7 + 6 * 4 + 2) + 5 + 5 + 6) * 3\n"
                                        + "7 * (6 + 8 * 6 * (5 + 6 + 5 * 4) * (9 * 2 * 6 * 4 + 8)) * 2 + 9\n"
                                        + "(7 * 3 * 3 * 9 * 4) + 9 * (9 * (8 * 8 + 2 * 8 + 3 + 6) * 5 + (4 + 3 * 3 * 4 + 5 * 8)) + 9 * 4\n"
                                        + "(7 + 3 + 4) * (2 + (4 * 7 + 5 * 3 * 7) * 4 * (3 + 5) + 8 * (8 * 9 + 2 + 7))\n"
                                        + "7 + (8 * 7 * 2 + (7 + 6 + 8) * 3 * 3) + (4 * (7 * 7 + 4 * 7 * 4) + 7 * 5 + (6 * 6 + 4))\n"
                                        + "5 + 3 + 4 + (2 + 4 * 5 * 2 + 8)\n"
                                        + "(3 + 3 + 2 + 9 * 4) + 7 + (2 * 8 * 7 * 3 + (3 + 9 + 9 * 2)) + 7 * (9 * 7) + 2\n"
                                        + "7 * 5 * (4 * 8 * 4 * (7 + 6 * 5 * 5 + 7 * 9)) + 9\n"
                                        + "(2 * 5 + 2 + (6 + 3 + 4)) + 2 + ((6 + 8 + 9) * 4) + 2\n"
                                        + "8 * (2 * 9 + 3 + 2) + 9\n"
                                        + "(5 + (5 + 9 * 5 + 5 * 4 * 9) * 7) + (8 * 8 * 9 + 8 * 3) + 3 + 6 * 5\n"
                                        + "8 + (7 * (7 + 9) + 3)\n"
                                        + "(7 + 4 * 5 + (8 + 2 + 7) * 7 + 8) + (9 * (9 * 8 + 7 + 9 * 4)) * (4 + 9 * 5) + 2\n"
                                        + "(7 * 5 + 6 * 5 * (2 * 4 * 3 + 4 + 7)) * 5 * (7 * (7 + 3 * 4) * 9)\n"
                                        + "4 * (6 + 9 * 3) + 9 + 5 * 9\n"
                                        + "(9 + 3 + 8 * 7 * 2 * 6) * (8 + 7 + 2 + 7 + 6) + (5 * 6 * 6 + 3) + 2 + 9\n"
                                        + "5 * 5 + 6 + (3 * 7 + 6)\n"
                                        + "2 * 7 + (5 * (5 + 8 + 9 * 5 + 3) + (3 * 2) * 3 + 7 * 2) + 2 + 5 + 3\n"
                                        + "(9 * 5 * (4 * 9 * 6) + 3 * 8) * 2 * 8 * 4 * ((3 * 7 * 9 + 5) + 6 * 7)\n"
                                        + "5 * 9 + ((9 + 4 + 5 * 7) + 4 * 3 + 6 * (2 * 2)) + 7 + 2\n"
                                        + "2 * (6 + 2) * ((6 + 3 * 8 * 3 + 7) * 7 * 5 + (9 + 2 + 3 * 9 * 8 * 8) * 7) + (9 * 9 + 8 * 7 + (9 * 3 * 8) + 9)\n"
                                        + "4 + 2 * 2 * 5 + 5 * 4\n"
                                        + "4 + 4 * 8 * 7 + 3\n"
                                        + "9 + (3 + 8 * (4 * 2 + 3 + 4) + 5 + 8) * 8 + 4 * 7 * (4 + 3 * 9 * 4)\n"
                                        + "6 + (3 + 2 * 2 + 3 + 7 * 8) * 4 * 8 + 2\n"
                                        + "(7 * 4 + 5 * 2 * (5 * 8 + 3 + 6 * 2)) + (7 * 2) * 9 * (7 + 7 + 5) * (8 + 2 * 9) * 6\n"
                                        + "3 + 9 * (7 + 2 * 6 + 2 + 5) * 4\n"
                                        + "9 + (8 * 2 + (8 + 8 + 8)) * 8 + 7\n"
                                        + "6 * 7 * 7 * 4\n"
                                        + "2 * (2 + (4 + 7 * 7 + 6 * 8)) + 4\n"
                                        + "(9 + 8 + (5 + 9 + 4 + 9 * 6 + 3)) * 4\n"
                                        + "6 + ((9 + 2 + 4 * 2 + 9) * 7 * 3 + 5 * 6 * 6) + 7 * 4 * 9\n"
                                        + "(5 + (5 + 9 + 6 + 7)) * 5 + 4 + 6\n"
                                        + "(5 * 8 * 6 + 8 + 7) * 2 + 7 + 8 + 5\n"
                                        + "(7 * 5 + 6 + 5 * (6 + 4 * 9)) + 4 * 8 + 3\n"
                                        + "4 * 9 * (8 * 5 * 3 * 9 * (4 * 2 * 3 * 4) * 3) * ((5 + 5 * 3) + 9 * 4 + (9 + 6) * 2 * 6)\n"
                                        + "7 * ((3 + 8 * 3 * 6 * 8 * 6) + (8 * 3 * 7 + 4 * 2 * 5) * 5 * 8 * (7 + 9 * 4 + 6 * 2 * 8) * 4) + 7 + 7\n"
                                        + "(7 * (7 + 4 + 4 * 5 * 5 + 2) * 2 + 5 * 6) + 2 * 5 + 3\n"
                                        + "(2 + 7) * 6 * (3 + (9 * 4 + 8 * 8 + 5) + (2 + 7 * 5 * 5) * 5 + (3 * 6) * 2) + (8 + 5 * 9 + 9 + 8)\n"
                                        + "6 * 5 * 3 + 7 * (4 + 2 + 7 + 9)\n"
                                        + "(9 + 6 + (2 + 2 + 5 + 6 * 5 * 8)) + 7 * 2\n"
                                        + "((7 + 7 * 9) + (5 + 8 * 2 + 4 * 7 * 7) + 7 * 3) * (8 + 2) + 7\n"
                                        + "3 + 6 * (8 * 7 * 3 * 7) + (5 + 4 * 3) + 6\n"
                                        + "(7 + 7) + 9 + (5 * (5 + 9 * 3 + 3 * 2 + 3) * 4 * (8 * 7) * 2 * (7 * 9 * 6 + 4 * 6 + 2)) + 6\n"
                                        + "((6 * 2 * 6 + 3 * 8) + (9 + 8 + 9 + 2 + 3 + 5) * 7 * 9) + 8 + 6 * 3 + 6 + 7\n"
                                        + "((9 * 8 + 2) * 8 + 6 * (4 + 8 + 4 * 9 * 9) + 9) * 7 * 5\n"
                                        + "8 + 6 + (4 + (6 + 6 + 3 + 9)) + 3 * 3 + 4\n"
                                        + "8 + (3 + 5 * 9 + 3) * 9 + 8 + 8 + 7\n"
                                        + "5 + (3 * 4 + (8 + 4 + 3 + 4) * 8 + 7)\n"
                                        + "(9 * (6 * 7 * 9 + 5) * (7 + 6 * 2 * 4 + 2 + 8)) + 4 + 8\n"
                                        + "3 * 5 * (9 + 2 * (9 * 6 * 7 + 9) + 2) * 7 + 6\n"
                                        + "4 + (3 * 7)\n"
                                        + "(3 + 7 * 9) * 6 * 6 + 3 + 3 + (2 + (9 * 4 + 6 + 7 + 9))\n"
                                        + "(4 * 2 * (9 + 5 * 9 + 5 * 9 + 9) + 8) * 7 * 7 * 3 + (9 * 4 * 7)\n"
                                        + "3 * (4 * 5) + 9 + ((7 * 8 * 4 * 8) + 7 * 3)\n"
                                        + "8 + 9 + 4 * 4 * ((5 + 3 * 6) * 5) * 6\n"
                                        + "9 + 8 + (9 * 9 + 4) + 5\n"
                                        + "9 * ((8 * 7 * 2 + 4 + 8) * 9 + 5 + (2 + 4 + 6 * 7 * 3 + 3) + (7 * 9 * 2 + 7 * 9) * 3) + (6 * (9 + 7 * 3 + 7 + 6) + 6 + 6)\n"
                                        + "4 * ((5 * 7 * 9 * 9 * 4) + 2 + (5 * 5) * 2 * 7 * 9) * 4 * 7 + 2 + 9\n"
                                        + "9 + (7 + 5) + 4 + (3 + 2 * 4) * 8 + 7\n"
                                        + "(8 * 7 + 7 + 6 + 7 * 6) * 5 + 7 + 5\n"
                                        + "9 + 5 * 5 * (3 + 8 * 4 + 8 + 4 * 5) + 3 + 4\n"
                                        + "4 * 5 * 6 + 6 + (7 * 7 + 6 + 4 + 4 * 3)\n"
                                        + "(4 * 2 + 9) + (4 * 3 + 9) * 9 + 8\n"
                                        + "9 * 6 + ((7 + 2 + 6) + (2 + 2 * 3)) * 6\n"
                                        + "((5 + 6 + 6 * 6) + 8 + (3 * 8 * 3 * 3 * 6) * 4) * (2 + 6 * 7 * 6 * (3 + 5)) * 6 * 2\n"
                                        + "(5 * 3) + (2 + 9) + 2\n"
                                        + "4 * 8 + 6\n"
                                        + "2 + 6 + 2 + 4\n"
                                        + "5 * 8 * (9 * 2 * 8) + 8 + 9 + 4\n"
                                        + "5 * (4 + 7 * (5 * 7 * 6 * 5 * 8) + (6 + 3 * 6 + 3 + 7) * (7 * 5 * 8) * 4)\n"
                                        + "5 * 9 + 5 + 5 * (9 * 2 + 4 + 9 * 7 + 4) * 7\n"
                                        + "5 + (4 + 7 + (9 + 7 + 5) + 9 * 6 * 3) * 5 * 3 + 5\n"
                                        + "(7 * 8 * 7) + 6 + 2 * 4 + 6 + 4\n"
                                        + "(2 + (4 + 4 + 6) + 9 + 5 * (2 * 7 * 3) * 2) + 7 + ((9 + 5) + (5 * 3 + 8 + 5 * 6 + 8) * 2 + 7) * 9 * 3\n"
                                        + "(2 * (9 * 5) + 9 + 4) + 8 * 7 + 8 + 8 + 8\n"
                                        + "2 + 3 * 3 + (7 * (9 + 5) + (8 + 6 + 8 + 2) * 7 * 2 + (7 + 8 + 9 * 3)) + 5 + 9\n"
                                        + "5 + 4 + (7 * 3 * (2 * 6 + 2 * 3) + 3) * 7\n"
                                        + "9 + (3 + (7 * 3) + 7 + 3) + 5 + (7 * 3 + 7)\n"
                                        + "7 + 4 * 2 + 4 + (8 + 3 + 7) * 5\n"
                                        + "9 * 4 + (6 + 9 + 3)\n"
                                        + "2 + 3 + 7 + 7 + 8 + ((4 * 7 + 9 + 8 + 6 * 3) * 3 * 7 * 9 * 6 * 7)\n"
                                        + "(7 * 9 * 4 * 2) + (3 + (5 + 2 + 4 + 6 * 8 * 5) + 5 + 5) + 4\n"
                                        + "(6 * 2 + 8 + 3) * ((8 * 3 * 9 * 2 * 7) * 4 + 9 + 6) * 6 + 8\n"
                                        + "(3 * 5 * 8 * 4 + (2 * 5) + 2) + 5 * 8 * 5 * 3 * 4\n"
                                        + "4 + (9 + 7 * (6 + 3 + 9 + 7))\n"
                                        + "(9 * 2 + 3 + 7) * 7 * (8 * 2 * 7) * 3 + 4\n"
                                        + "6 * (8 * 2 * 8 + 8 + 9 + (4 * 7 * 4 + 9 + 5 + 5)) * 4\n"
                                        + "5 * (2 * 4) * 6\n"
                                        + "4 + 4 * 4 + 6 + ((5 + 3 + 2 * 2 + 4) * 3 * 2 * (7 + 7 + 8 + 6 + 3) + 2)\n"
                                        + "7 * 6 * 8 + (9 * 9 + 3 + 9 + 3 * 7) + 3\n"
                                        + "8 * (2 * 8 * (2 * 4 + 6 * 4 * 8)) * (9 * 3 + 8 * 3 * 8 * (6 + 8 + 6 * 7 + 3)) * 6 * 6 * 7\n"
                                        + "(3 + (7 * 7 * 4 + 2 * 4 + 7)) + 6 * 5 + 9 + 4\n"
                                        + "(2 + 2 * 3) + (3 * 3 + 2 * 3 * 5 + 9) + 8 * (8 + 9 * (9 + 9 + 2 * 9) + 9 + (6 + 3 * 7) * 5) * 4\n"
                                        + "4 * 8 * 3 + 5 * (6 * (5 * 4 + 9 + 4 * 6 * 3)) + 9\n"
                                        + "4 * ((7 + 4 * 8) * 2) * 6 * 6 + (7 * 4) * 2\n"
                                        + "7 + 3 * 3 + 6\n"
                                        + "2 * (3 + (6 + 5) + (3 * 2 + 6) + 4) + 6 * 7 * (5 * 2 + 3 + 9 * 9)\n"
                                        + "(7 * 5 * (8 + 4 + 6 + 3 * 5)) + 2 * 9\n"
                                        + "3 * 4 * 7 * (7 + (5 + 7)) + 9\n"
                                        + "9 * ((9 + 7) + 3)\n"
                                        + "5 + ((6 * 2 + 8) * 7)\n"
                                        + "7 + 2 * (6 + 6 + 6 + 3) * 2\n"
                                        + "(9 + 3 * (4 + 8 + 5 + 5 + 7 * 9)) * ((7 * 5 * 9 * 2 * 6) + 5 + 6 * 3 + 9) * 8 + 7 * (5 + 6)\n"
                                        + "3 + ((8 + 5 * 9 * 6 + 6) * 2 * 5 + 9 * (8 * 5 * 8 + 4 + 9 * 2) * 8) * 8 + 7\n"
                                        + "3 + 2 * 3 + ((9 + 3) * 9)\n"
                                        + "8 * (2 + (6 + 2 * 8)) * 2 * 7 + 8\n"
                                        + "(4 + 9 * (8 + 4 * 2 + 9 * 6 + 8) * 6 + (8 * 9) + 3) * 6\n"
                                        + "3 * (3 * 9 * 5 * 6 + 2 + 4) * 9 * (8 * 4 * 7 * 7 * 8 * 3) * 5\n"
                                        + "8 * 2 + (7 + 4 + 5 + 2 * 4 * 8) + (2 * 4 + 7 + 4) * 4\n"
                                        + "(7 + 9 + 9 * 6) * 6 + 9 * 8\n"
                                        + "5 + 8 + 3 * 3 + (6 + (9 * 8 + 8 * 5) + (3 * 5 * 4))\n"
                                        + "(2 * 9 + 3 * 9 * 8) * (6 + 6 * 8) * 9 * 4\n"
                                        + "2 * (8 * 9 + 4)\n"
                                        + "2 + 5 * (5 * 4 * 9 * 3 * 8 * 3) * 8\n"
                                        + "9 * 9 * (7 * 3 * 4) * 8 * 8\n"
                                        + "4 + (9 + 8 + 6 + 8) * 9 + (6 + 6 + 9 * 5) + 9 + (8 + 4 * (5 + 6 + 3 * 6 + 6) + 5 * (8 * 3 * 8 * 3 * 7 * 2))\n"
                                        + "(5 * 8 * 7 * 5 * 2 + 4) * 6 + 8 * ((4 * 5 * 9 + 3 + 2) * 4 + 4)\n"
                                        + "2 * 9 + (9 * 7 * 8 * 6 * 7 * 9) + 4 + (7 + (3 + 9 * 5 + 5 + 2) + (6 * 3 + 2 + 7 * 7)) * 7\n"
                                        + "7 * 3 * 7 + (2 * 2 * 4) * 5\n"
                                        + "(2 + 8 * 6 * 3 * (6 * 5 + 9 + 3 * 8 + 8) + (3 + 6 + 9 + 4 * 3 * 6)) + 4 + (3 * 4 + 2 + (5 * 3 * 7 + 5 + 9)) * ((2 + 3 + 6 + 6 * 4 * 2) + 4 * 9 + 7 * (6 + 2)) + (6 + (8 * 7 + 2 + 2) + 8) * (7 + (9 + 3 + 9))\n"
                                        + "7 * 4 * (7 + 5 * 3 + (9 * 2 * 5 * 2) + 9 + 2) * (5 + 4 * (8 + 8 * 6) + 2)\n"
                                        + "7 * (9 * (7 + 4 * 3 + 8 + 3) + 8 + 8) + 9\n"
                                        + "((8 + 6 + 4) + (9 + 6 * 7 + 4) + (6 + 9 * 5 + 4) + 3) + 5 + 9 + (9 + 9 * 7) * 3 + 2\n"
                                        + "8 + 4 + (9 * 9 + 2 * 8 + 4) + 5 * 4\n"
                                        + "9 * (3 * (7 + 8 * 7 * 8) + 5 * 7 * (5 * 6 + 7 * 4 + 6)) + 9\n"
                                        + "(8 + 3 * 6 + 8 + 8) * 5 * 3\n"
                                        + "((5 + 7 + 4 + 2 * 6) + (6 * 4 + 6 * 3 + 8) * 5 + 8 + 8 * (5 * 6 + 2)) + (2 * 4 + 9 * 7 * 6 * (9 * 6 + 6 * 8)) * 6 * 9 + 3\n"
                                        + "((3 * 7) * 7 * 2 * 8 + 2 * (2 + 6 + 7 * 3 + 2 * 5)) + (6 * 3) * (4 * 5 + 4 + 9) + 6 + (9 * 7 * 5 + 5 * 9) + 3\n"
                                        + "6 + 4 + 5 + 8 + (2 * (2 * 2 + 8) * 9 * 7) + 6\n"
                                        + "5 * 4 + 7 + (2 + 6 * 3 + (2 * 2 * 2))\n"
                                        + "(8 * 3 + (2 * 6 * 4 * 2 * 9) + 5 + 9 * 8) * 5 + 7\n"
                                        + "5 * 5 * (3 + 4 * 3) + ((7 * 3 + 5 + 8) + 2) + 6\n"
                                        + "((9 * 5) + 4) * 6 + 4 * ((5 * 2 * 9) + 5 + 3) + 6 + 3\n"
                                        + "9 * (2 + 4 + 4 * (5 * 9 * 3 + 4 * 5 + 8) * (3 * 7) * 6) + 6\n"
                                        + "(3 + 2 * 5 + 5) * (9 * 3 + 5 * 7) + 3 * 9\n"
                                        + "6 * ((7 + 9 + 9 * 2 * 4) * 8) + 9 + (6 * 8) * 3\n"
                                        + "4 + 9 * 8 + (3 * 4 * 4 * 7 * (7 * 6 + 7 * 2 * 7 + 8))\n"
                                        + "(7 + 7) + 7 * ((7 + 3 * 4 + 8 + 8 + 6) + 9 + 2 * 6 * 9 + 2)\n"
                                        + "9 + 7 + 9 * 9 + 5 + 5\n"
                                        + "8 + 2 + 3 + 2 + 6\n"
                                        + "8 + (4 * (3 * 2) + 9 + 6)\n"
                                        + "9 * 8 * 2 + (6 + 6 * 9) + 8 * 8\n"
                                        + "7 + 4 * 2 * 5 + 4 + 7\n"
                                        + "5 * 8 * 4 * 2 * (6 + 5 + 2)\n"
                                        + "3 * 5 * (3 + 9 * 2) * (3 + 5)\n"
                                        + "3 * 6 * 7 * (2 + 8 * (8 + 6 + 3 * 9 + 9 * 5) * 3 + 8 * (6 + 3 * 5 + 8 + 4)) * (9 + 5 + 9) * 5\n"
                                        + "5 * 3\n"
                                        + "(3 * 2 + 7 + 8) * 2\n"
                                        + "((7 + 8 * 4) + 6 + 9 * (6 + 5 + 4 + 9 + 7 * 6) + 9 + 5) + 5 * 4\n"
                                        + "3 * 9 * 6 * 4 * ((4 + 8 + 6) + (4 + 6 * 2 + 9 + 7 * 2) + 7 * 2 + (5 + 9 * 2 + 2))\n"
                                        + "(8 + 6 + 5) * 4 * 8\n"
                                        + "7 * 4 + 8 + (4 + 9 + 3 + 5 + 2 + 6) + (7 + 2 * 5 * 7) + 3\n"
                                        + "6 + 7 * 4 + (8 * 3 + 8 * (7 * 5 + 3 * 4 * 5) * 9 * 2) * 2 + 3\n"
                                        + "9 + 6 * (6 * (4 + 7)) + 4 * 7\n"
                                        + "(4 + 5 + 8) * 8 + (8 * 7 + 9 * 5) * 9\n"
                                        + "5 * 3 * (9 * 9 + 5 * 6 * 7 + 6) + 7 + 5\n"
                                        + "7 + 3 * 7 * ((4 + 6 * 4 + 8) + 5 + 9 + 7 * 5)\n"
                                        + "9 * (8 + 9 + 3 * 5 * (4 + 6 * 4 + 7 + 7) + (3 * 8 * 2 + 2 + 8)) * 8 + 8 * (3 * 9) + 6\n"
                                        + "2 + (7 * 9 * 3) + (5 * 8 * 8 * (2 + 2 * 2 * 6 * 7 + 6)) * (9 * 6 + 2)\n"
                                        + "8 * (4 + (8 + 3 * 4 * 2 * 5) * (8 * 2) + (2 + 2 + 7 * 6 + 3 * 2) + (2 * 7)) * 7\n"
                                        + "3 * 7 * 3 + 4 + (2 + (6 * 3) + (2 + 5 + 8 + 3 * 3) + 2 + (4 * 7 + 2)) * 4\n"
                                        + "(7 * 7 + 5 * 8) * 3 + 2 + 9 + (2 * 8 * 4 + 7 + 4 * 8) * (7 + 8 * 5)\n"
                                        + "2 * ((7 * 5 * 4) * (4 + 7 * 9 + 3 + 3 * 6) + (5 + 5 + 9 + 7 * 8) * (5 * 2 * 8 + 4 * 6) + (5 + 4 + 3 * 9 * 4 + 9)) * 6 * 8 * 5\n"
                                        + "(8 + 2) * 3 + 8 * ((5 * 9 * 7 * 7) * 7) + 8\n"
                                        + "(3 + 7 + 9 + 7) * 9 * (2 + 5 * 8 * 9) + (5 * 5 + 9) + (5 + (4 * 4 * 7 * 9) + 4 * (2 * 2 + 5))\n"
                                        + "3 + (4 + 8 + 3 + 4 + 7 + 6) + 4 + 3 * 4 + ((5 * 6) + 2 * 5 * 2 + 8 * 3)";
}
